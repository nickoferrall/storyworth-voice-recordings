### This file was generated by Nexus Schema
### Do not make changes to this file directly


enum Access {
  PRIVATE
  PUBLIC
}

input AddDirectoryCompCategoryInput {
  difficulty: Difficulty!
  gender: Gender!
  isSoldOut: Boolean!
  teamSize: Int!
}

input AddDirectoryCompInput {
  categories: [AddDirectoryCompCategoryInput!]
  country: String
  currency: Currency
  date: DateTime
  description: String
  endDate: DateTime
  eventType: String
  format: String
  location: String
  logo: String
  organiserEmail: String!
  price: String
  tags: [String!]
  title: String!
  websiteUrl: String
}

type Address {
  city: String
  country: String
  id: String
  postcode: String
  region: String
  street: String
  venue: String
}

enum AgeGroup {
  ADULTS
  MASTERS
  OPEN
  TEENS
}

type AthleteCompetition {
  competition: Competition
  competitionId: String!
  createdAt: DateTime
  id: String!
  updatedAt: DateTime
  user: User
  userId: String!
}

input BulkRegistrationInput {
  email: String!
  firstName: String!
  lastName: String!
  teamGroupId: ID
  teamName: String
  ticketTypeId: String!
}

type Category {
  createdAt: DateTime!
  difficulty: Difficulty!
  directoryComp: DirectoryComp
  directoryCompId: String!
  gender: Gender!
  id: String!
  isSoldOut: Boolean!
  price: Int!
  tags: [String]
  teamSize: Int!
  updatedAt: DateTime!
}

input CategoryInput {
  difficulty: Difficulty!
  gender: Gender!
  id: String!
  isSoldOut: Boolean!
  tags: [String!]!
  teamSize: Int!
}

type Competition {
  access: Access
  address: Address!
  addressId: String!
  ageGroup: AgeGroup
  athletes: [AthleteCompetition]
  createdAt: DateTime
  createdBy: User
  createdByUserId: String!
  creators: [CompetitionCreator]
  currency: Currency
  deadline: DateTime
  description: String
  difficulty: Difficulty
  directoryComp: DirectoryComp
  directoryCompId: String
  earlyBird: EarlyBird
  email: String
  endDateTime: DateTime
  gender: Gender
  hasWorkouts: Boolean!
  id: String!
  instagramHandle: String
  isActive: Boolean!
  lastTicketType: TicketType
  location: String
  logo: String
  name: String
  org: Org
  orgName: String
  participantsCount: Int!
  price: Float
  registrationEnabled: Boolean!
  registrationTrend: [DailyRegistration]
  registrationsCount: Int!
  releaseDateTime: DateTime
  source: String
  startDateTime: DateTime
  teamsCount: Int!
  ticketTypes: [TicketType]
  timezone: String
  types: [CompetitionType]
  updatedAt: DateTime
  website: String
}

type CompetitionCreator {
  competition: Competition
  competitionId: String!
  createdAt: DateTime
  id: String!
  updatedAt: DateTime
  user: User
  userId: String!
}

type CompetitionEditSuggestion {
  competition: Competition
  competitionId: String!
  createdAt: DateTime!
  id: String!
  reason: String
  reviewedAt: DateTime
  reviewedBy: String
  reviewer: User
  status: CompetitionEditSuggestionStatus!
  suggestedChanges: String!
  updatedAt: DateTime!
  user: User
  userId: String!
}

enum CompetitionEditSuggestionStatus {
  APPROVED
  PENDING
  REJECTED
}

type CompetitionFilters {
  cities: [String!]!
  countries: [String!]!
  teamSizes: [Int!]!
}

type CompetitionInvitationDetails {
  competition: Competition!
  createdAt: DateTime!
  email: String
  id: String!
  sender: User
  status: String!
}

type CompetitionPayload {
  competition: Competition
  message: String
}

enum CompetitionType {
  CHARITY
  CROSSFIT_LICENCED_EVENT
  CROSSFIT_SEMI_FINALS
  ELITE
  INTERMEDIATE
  IN_HOUSE
  MASTERS
  OLYMPIC_WEIGHTLIFTING
  POWERLIFTING
  PRIZE_AWARDED
  QUALIFIER
  STRONGMAN
  TEEN
  VIRTUAL
  WOMENS_ONLY
}

type CompetitionWithStats {
  competition: Competition
  registrationsInPeriod: Int
}

input CreateBreakInput {
  competitionId: String!
  duration: Int!
  startTime: DateTime!
}

input CreateEarlyBirdInput {
  endDateTime: DateTime
  limit: Int
  price: Float
  startDateTime: DateTime
}

input CreateHeatInput {
  startTime: DateTime!
  workoutId: String!
}

input CreateNotificationSubscriptionInput {
  countries: [String]
  difficulty: String
  email: String!
  eventType: String
  gender: String
  locations: [String]
  tags: [String!]
  teamSize: String
}

input CreatePartnerInterestInput {
  categoryIds: [String!]
  description: String
  instagram: String
  interestType: PartnerInterestType!
  partnerPreference: PartnerPreference!
  phone: String
  ticketTypeIds: [String!]
  userIds: [String!]!
}

input CreatePartnerRequestInput {
  fromInterestId: String
  instagram: String
  message: String
  phone: String
  toInterestId: String!
}

input CreatePaymentLinkInput {
  answers: [RegistrationAnswerInput!]!
  email: String!
  invitationToken: String
  name: String!
  redirectTo: String
  selectedHeatId: String
  ticketTypeId: String!
}

input CreateRegistrationInput {
  answers: [RegistrationAnswerInput!]!
  email: String!
  invitationToken: String
  name: String!
  selectedHeatId: String
  ticketTypeId: String!
}

input CreateWorkoutInput {
  competitionId: String!
  description: String!
  includeStandardsVideo: Boolean
  location: String!
  name: String!
  releaseDateTime: DateTime!
  scoreType: ScoreType!
  timeCap: Int
  unitOfMeasurement: Unit!
  videos: [WorkoutVideoInput]
}

enum Currency {
  AED
  AUD
  BRL
  CAD
  CHF
  CNY
  DKK
  EUR
  GBP
  HKD
  INR
  JPY
  MXN
  NOK
  NZD
  SEK
  SGD
  SR
  THB
  USD
  ZAR
}

type DailyRegistration {
  count: Int!
  cumulativeCount: Int!
  date: String!
}

"""Date and time"""
scalar DateTime

enum Difficulty {
  ELITE
  EVERYDAY
  INTERMEDIATE
  MASTERS
  RX
  TEEN
}

type DirectoryComp {
  categories: [Category!]
  competition: Competition
  competitionId: String
  country: String!
  createdAt: DateTime!
  ctaLink: String
  currency: Currency
  description: String
  email: String
  endDate: DateTime
  id: String!
  instagramHandle: String
  location: String!
  logo: String
  price: Float
  region: String
  startDate: DateTime!
  state: String!
  teamSize: String
  ticketWebsite: String
  title: String!
  updatedAt: DateTime!
  website: String
}

enum DirectoryCompType {
  CROSSFIT
  HYROX
  HYROX_SIMULATION
  OTHER
}

enum DivisionScoreType {
  CUMULATIVE_UNITS
  POINTS_PER_PLACE
  POINT_BASED
}

type EarlyBird {
  createdAt: DateTime!
  endDateTime: DateTime
  id: String!
  limit: Int
  price: Float!
  startDateTime: DateTime
  ticketTypeId: String
  updatedAt: DateTime!
}

input EarlyBirdInput {
  endDateTime: DateTime
  id: String
  limit: Int
  price: Float
  startDateTime: DateTime
  ticketTypeId: String!
}

type Entry {
  createdAt: DateTime!
  id: String!
  invitationToken: String
  laneByWorkoutId(workoutId: String!): Lane
  name: String!
  score(workoutId: String!): Score
  scores: [Score!]!
  team: Team
  teamId: String
  ticketType: TicketType!
  ticketTypeId: String!
  updatedAt: DateTime!
  user: User
  userId: String!
}

type Feedback {
  createdAt: DateTime
  id: String
  text: String
  userId: String
}

type ForgotPasswordResponse {
  error: String
  success: Boolean
}

enum Gender {
  FEMALE
  MALE
  MIXED
}

input GenerateHeatsInput {
  firstHeatStartTime: DateTime
  heatLimitType: HeatLimitType
  heatsEveryXMinutes: Int
  lanes: Int
  maxLimitPerHeat: Int
  oneTicketPerHeat: Boolean
  ticketTypeOrderIds: [String!]
  totalHeatsPerWorkout: Int
}

type Heat {
  allTicketTypes: [TicketType!]!
  availableLanes: Int!
  createdAt: DateTime!
  heatLimitType: HeatLimitType!
  id: String!
  lanes: [Lane!]!
  maxLimitPerHeat: Int!
  name: String!
  registrationsCount: Int!
  startTime: DateTime!
  ticketTypes: [TicketType!]!
  updatedAt: DateTime!
  workout: Workout
  workoutId: String!
}

enum HeatLimitType {
  ATHLETES
  ENTRIES
}

type HeatTicketTypes {
  """The ID of the Heat"""
  heatId: String!

  """The ID of the TicketType"""
  ticketTypeId: String!
}

type Integration {
  accessToken: String!
  athleteFirstname: String
  athleteId: String!
  athleteLastname: String
  athleteProfile: String
  createdAt: DateTime
  expiresAt: DateTime
  id: String!
  refreshToken: String!
  registrationAnswerId: String!
  type: IntegrationType!
  updatedAt: DateTime
}

input IntegrationInput {
  accessToken: String!
  athleteFirstname: String
  athleteId: String!
  athleteLastname: String
  athleteProfile: String
  expiresAt: String!
  refreshToken: String!
  type: String!
}

enum IntegrationType {
  STRAVA
}

type Invitation {
  createdAt: DateTime!
  email: String
  id: String!
  sentBy: User
  sentByUserId: String!
  status: InvitationStatus!
  team: Team
  teamId: String!
  token: String!
  updatedAt: DateTime!
}

enum InvitationStatus {
  ACCEPTED
  EXPIRED
  PENDING
  REVOKED
}

"""Json custom scalar type"""
scalar Json

type Lane {
  createdAt: DateTime!
  entry: Entry!
  entryId: String!
  heat: Heat!
  heatId: String!
  id: String!
  number: Int!
  score: Score
  updatedAt: DateTime!
}

type LoginResponse {
  error: String
  user: User
}

type LogoutPayload {
  message: String
  success: Boolean
}

type Mutation {
  acceptCompetitionInvitation(token: String!): Boolean
  addDirectoryComp(input: AddDirectoryCompInput!): Boolean
  adminResetPassword(newPassword: String!, userId: String!): ResetPasswordResult
  approvePotentialCompetitions(potentialCompetitionIds: [String!]!): String
  assignEntryToHeat(entryId: String!, heatId: String!): Lane
  checkInAthlete(isCheckedIn: Boolean!, registrationId: String!): Registration
  cloneCompetition(id: String!): Competition
  createBreak(input: CreateBreakInput!): Boolean!
  createBulkRegistrations(input: [BulkRegistrationInput!]!): [User]!
  createComp(endDateTime: DateTime!, name: String!, numberOfWorkouts: Int!, orgName: String, startDateTime: DateTime!, timezone: String): CompetitionPayload
  createHeats(competitionId: String!, input: [CreateHeatInput!]!): [Heat!]!
  createNotificationSubscription(input: CreateNotificationSubscriptionInput!): NotificationSubscription
  createPartnerInterest(input: CreatePartnerInterestInput!): [PartnerInterest]
  createPartnerInterestTeamMembers(partnerInterestId: String!, teamMembers: [Json!]!): [PartnerInterestTeamMember]
  createPartnerRequest(input: CreatePartnerRequestInput!): PartnerRequest
  createPaymentLink(input: CreatePaymentLinkInput!): String
  createReferral(referredId: String!, referrerId: String!): Referral
  createRegistration(input: CreateRegistrationInput!): User
  createRegistrationField(registrationField: RegistrationFieldInput!, ticketTypeIds: [String!]!): RegistrationField
  createScore(isCompleted: Boolean!, laneId: String!, note: String, scorecard: String, value: String!): Score!
  createTicketType(input: TicketTypeInput!): TicketType
  createVolunteerTicketType(competitionId: String!): TicketType
  createWorkout(input: CreateWorkoutInput!): Workout
  createWorkoutVideo(description: String, orderIndex: Int, title: String!, url: String!, workoutId: String!): WorkoutVideo
  deleteCompetition(id: String!): Boolean

  """
  Deletes a DirectoryComp and its associated categories. SUPER USER ONLY.
  """
  deleteDirectoryComp(id: String!): Boolean
  deleteHeat(id: String!): Heat
  deleteRegistration(competitionId: ID!, registrationId: ID!, teamId: ID, userId: ID): Boolean
  deleteRegistrationField(registrationFieldId: String!): String
  deleteTeam(competitionId: ID!, teamId: ID!): Boolean
  deleteTicketType(id: String!): TicketType
  deleteVolunteerTicket(competitionId: String!): String
  deleteWorkout(id: String!): Workout
  deleteWorkoutVideo(id: String!): Boolean
  duplicateTicketType(originalId: String!): TicketType
  forgotPassword(email: String!): ForgotPasswordResponse
  generateHeatsFromSettings(competitionId: String!, input: GenerateHeatsInput!): [Heat!]
  importDirectoryComp: Boolean!
  inviteToCompetition(competitionId: String!, email: String!): Boolean

  """Links a DirectoryComp to a Competition. SUPER USER ONLY."""
  linkDirectoryCompToCompetition(competitionId: String!, directoryCompId: String!): Boolean
  login(email: String!, password: String!): LoginResponse
  logout: LogoutPayload
  moveAthleteToTeam(competitionId: String!, targetTeamId: String!, userId: String!): Boolean
  rejectPotentialCompetitions(potentialCompetitionIds: [String!]!): String
  requestDirectoryCompEdit(input: RequestDirectoryCompEditInput!): Boolean
  resendInvitation(invitationId: String!): Boolean
  resetPassword(password: String!, token: String!): ResetPasswordResponse
  scheduleDayBeforeEventEmail(competitionId: ID!): Boolean!
  sendBulkEmail: Boolean!
  sendEmails(competitionId: String!, message: String!, recipients: [String!]!, subject: String!): Boolean
  sendInvitations(competitionId: String!, emails: [String!]!): Boolean
  sendLoginToken(input: SendLoginTokenInput!): Boolean!
  signUp(email: String!, firstName: String!, lastName: String!, password: String!): SignupResponse
  submitFeedback(text: String!): Feedback
  suggestCompetitionEdit(city: String, competitionId: String!, country: String, currency: String, description: String, email: String, name: String, price: Float, reason: String, venue: String, website: String): String
  suggestNewCompetition(city: String, country: String, currency: String, description: String, email: String, endDate: String, name: String!, price: Float, reason: String, startDate: String, venue: String, website: String): String
  unassignAllEntries(competitionId: String!): Boolean!
  unassignEntry(laneId: String!): Lane

  """Unlinks a DirectoryComp from a Competition. SUPER USER ONLY."""
  unlinkDirectoryCompFromCompetition(competitionId: String!, directoryCompId: String!): Boolean
  updateCompetition(city: String, country: String, description: String, email: String, endDateTime: DateTime, facebook: String, id: String!, instagram: String, name: String, orgName: String, postcode: String, registrationEnabled: Boolean, startDateTime: DateTime, street: String, timezone: String, twitter: String, types: [CompetitionType], venue: String, youtube: String): Competition
  updateDirectoryComp(input: UpdateDirectoryCompInput!): DirectoryComp
  updateDirectoryCompStates: [DirectoryComp]!
  updateEarlyBird(earlyBird: EarlyBirdInput!): EarlyBird
  updateHeat(id: String!, maxLimitPerHeat: Int, startTime: DateTime, ticketTypeIds: [String!]): Heat
  updateHeatLimits(input: [UpdateHeatLimitsInput!]!): [Heat!]!
  updateInvitation(email: String!, id: String!): Invitation
  updateLaneHeat(heatId: String!, id: String!): Lane
  updateLaneOrder(laneId: String!, newPosition: Int!): Lane
  updateNotificationSubscription(input: UpdateNotificationSubscriptionInput!): NotificationSubscription
  updatePartnerInterest(categoryId: String, description: String, id: String!, instagram: String, phone: String, ticketTypeId: String): PartnerInterest
  updatePartnerRequest(input: UpdatePartnerRequestInput!): PartnerRequest
  updatePotentialCompetition(city: String, country: String, currency: String, description: String, email: String, endDateTime: DateTime, id: String!, instagramHandle: String, name: String, price: Float, region: String, startDateTime: DateTime, state: String, venue: String, website: String): String
  updateRegistrationField(id: String!, options: [String], question: String, repeatPerAthlete: Boolean, requiredStatus: RequiredStatus, ticketTypeIds: [String!], type: QuestionType): RegistrationField
  updateScoreById(id: String!, isCompleted: Boolean!, note: String, scorecard: String, value: String!): Score!
  updateTeam(id: String!, name: String!): Team
  updateTicketType(input: UpdateTicketTypeInput!): TicketType
  updateUser(firstName: String, lastName: String): User
  updateUserBio(bio: String!): User
  updateUserById(competitionId: String!, firstName: String, lastName: String, userId: String!): User
  updateWorkout(id: String!, input: UpdateWorkoutInput!): Workout
  updateWorkoutVideo(description: String, id: String!, orderIndex: Int, title: String, url: String): WorkoutVideo
  updateWorkoutVisibility(id: String!, isVisible: Boolean!): Workout
  uploadCompetitionLogo(competitionId: String!, image: String!): Competition
  uploadOrgImage(image: String!, orgId: String!): Org
  uploadUserAvatar(image: String!): User
}

type NotificationSubscription {
  countries: [String]
  difficulty: String
  email: String!
  eventType: String
  gender: String
  id: String!
  locations: [String]
  tags: [String!]
  teamSize: String
  userId: String
}

type Org {
  contactNumber: String
  createdAt: DateTime
  description: String
  email: String!
  facebook: String
  id: String
  instagram: String
  logo: String
  name: String
  twitter: String
  updatedAt: DateTime
  website: String
  youtube: String
}

type PartnerInterest {
  category: Category
  categoryId: String
  createdAt: DateTime!
  description: String
  id: String!
  instagram: String
  interestType: PartnerInterestType!
  partnerPreference: PartnerPreference!
  partnerRequests: [PartnerRequest]
  phone: String
  status: String!
  teamMembers: [PartnerInterestTeamMember]
  ticketType: TicketType
  ticketTypeId: String
  updatedAt: DateTime!
  user: User
  userId: String!
}

enum PartnerInterestStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  FILLED
  PARTIALLY_FILLED
}

type PartnerInterestTeamMember {
  createdAt: DateTime!
  email: String!
  id: String!
  invitationToken: String
  name: String!
  partnerInterest: PartnerInterest
  partnerInterestId: String!
  status: PartnerInterestTeamMemberStatus!
  updatedAt: DateTime!
  user: User
  userId: String
}

enum PartnerInterestTeamMemberStatus {
  ACCEPTED
  INVITED
  REJECTED
}

enum PartnerInterestType {
  LOOKING_FOR_JOINERS
  LOOKING_TO_JOIN
}

enum PartnerPreference {
  ANYONE
  SAME_GYM
}

type PartnerRequest {
  createdAt: DateTime!
  fromInterest: PartnerInterest
  fromInterestId: String
  fromUser: User
  fromUserId: String
  id: String!
  instagram: String
  message: String
  phone: String
  status: PartnerRequestStatus!
  toInterest: PartnerInterest
  toInterestId: String!
  updatedAt: DateTime!
}

enum PartnerRequestStatus {
  ACCEPTED
  CANCELLED
  PENDING
  REJECTED
}

type Payment {
  amount: Int!
  createdAt: DateTime!
  currency: String!
  id: String!
  paymentIntentId: String!
  registrationId: String!
  status: String!
  updatedAt: DateTime!
  user: User
  userId: String!
}

type PaymentCompetitionMapping {
  amount: String
  competition: Competition
  currency: String
  date: String
  email: String
  ticketType: TicketType
  transactionId: String
}

type PotentialCompetition {
  address: Address
  addressId: String
  country: String
  createdAt: DateTime
  currency: String
  description: String
  email: String
  endDateTime: DateTime
  id: String!
  instagramHandle: String
  logo: String
  name: String!
  orgName: String
  potentialTicketTypes: [PotentialTicketType]
  price: Float
  region: String
  reviewedAt: DateTime
  reviewedBy: String
  reviewer: User
  scrapedData: String
  source: String!
  startDateTime: DateTime
  state: String
  status: PotentialCompetitionStatus!
  timezone: String
  updatedAt: DateTime
  website: String
}

enum PotentialCompetitionStatus {
  APPROVED
  PENDING
  REJECTED
}

type PotentialTicketType {
  allowHeatSelection: Boolean!
  createdAt: DateTime
  currency: String
  description: String
  id: String!
  isVolunteer: Boolean!
  maxEntries: Int!
  name: String!
  passOnPlatformFee: Boolean!
  potentialCompetitionId: String!
  price: Float!
  teamSize: Int!
  updatedAt: DateTime
}

type Query {
  checkReferralCode(referralCode: String!): Boolean
  earlyBirdById(id: String!): EarlyBird
  getAllDirectoryComps: [DirectoryComp!]!
  getAvailableHeatsByCompetitionId(competitionId: String!, ticketTypeId: String!): [Heat!]!
  getAvailableTeamsForMove(competitionId: String!, excludeTeamId: String, ticketTypeId: String!): [Team!]!
  getCompetitionById(id: String!): Competition
  getCompetitionFilters: CompetitionFilters
  getCompetitionInvitation(token: String!): CompetitionInvitationDetails
  getCompetitionsByIds(ids: [String!]!): [Competition!]!
  getCompetitionsByUser: [Competition!]!
  getDirectoryComp(id: String!): DirectoryComp
  getDirectoryComps(initialLoad: Boolean! = false): [DirectoryComp!]!
  getEntriesByCompetitionId(competitionId: String!): [Entry!]!
  getEntriesByWorkoutId(workoutId: String!): [Entry!]!
  getEntryByUserAndCompetition(competitionId: String!, userId: String!): Entry
  getExploreCompetitions(cities: [String!], countries: [String!], endDate: String, genders: [String!], limit: Int! = 20, offset: Int! = 0, search: String, startDate: String, teamSize: String): [Competition!]!
  getHeatById(id: String!): Heat!
  getHeatTicketTypesByHeatId(heatId: String!): [HeatTicketTypes!]!
  getHeatsByCompetitionId(competitionId: String!): [Heat!]!
  getHeatsByWorkoutId(workoutId: String!): [Heat!]!
  getIntegration(id: String!): Integration
  getIntegrationByRegistrationAnswerId(registrationAnswerId: String!): Integration
  getInvitationByToken(token: String!): Invitation
  getInvitationsByTeamId(teamId: String!): [Invitation!]!
  getLaneById(id: String!): Lane!
  getLanesByHeatId(heatId: String!): [Lane!]!

  """
  Fetches the competitions for which the currently authenticated user is registered as an athlete.
  """
  getMyCompetitionsAsAthlete: [Competition!]!

  """
  Fetches the competitions for which the currently authenticated user is registered as a creator.
  """
  getMyCompetitionsAsCreator: [Competition!]!
  getNotificationSubscription(email: String!): NotificationSubscription
  getPartnerInterests(competitionId: String, directoryCompId: String, interestType: String, status: String): [PartnerInterest]
  getPartnerRequests: [PartnerRequest]
  getPaymentMappings(days: String = "30", emails: String): [PaymentCompetitionMapping]
  getPotentialCompetition(id: String!): PotentialCompetition
  getPotentialCompetitions: [PotentialCompetition!]!
  getRegistrantById(id: String!): Registration!
  getRegistrationFieldsByCompetitionId(competitionId: String!, isVolunteer: Boolean! = false): [RegistrationField!]!
  getRegistrationStats(days: String = "30"): RegistrationStats
  getRegistrationsByCompetitionId(competitionId: String!): [Registration!]!
  getScoreSettingByCompetitionId(competitionId: String!): ScoreSetting!
  getScoreSettingById(id: String!): ScoreSetting!
  getScoresByWorkoutId(workoutId: String!): [Score!]!
  getSentEmails(compId: String!): [SentEmail!]!
  getTicketTypeById(ticketId: String!): TicketType
  getTicketTypesByCompetitionId(competitionId: String!): [TicketType!]!
  getUnassignedEntriesByCompetitionId(competitionId: String!): [Entry!]!
  getUser: User
  getUserSchedule(competitionId: String!, userId: String!): [UserScheduleItem!]!
  getViewer: User
  getWorkoutById(id: String!): Workout!
  getWorkoutsByCompetitionId(competitionId: String!): [Workout!]!
  isUserRegisteredForCompetition(competitionId: String!): Boolean!
}

enum QuestionType {
  DROPDOWN
  EMAIL
  INTEGRATION
  MULTIPLE_CHOICE
  MULTIPLE_CHOICE_SELECT_ONE
  STATEMENT
  TEXT
}

type Referral {
  createdAt: DateTime
  id: String
  referredId: String
  referrerId: String
}

type Registration {
  competition: Competition!
  competitionId: String!
  createdAt: DateTime!
  id: String!
  isCheckedIn: Boolean!
  registrationAnswers: [RegistrationAnswer!]!
  registrationFields: [RegistrationField!]!
  team: Team
  teamName: String
  ticketType: TicketType!
  ticketTypeId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type RegistrationAnswer {
  answer: String!
  competition: Competition
  competitionId: String!
  createdAt: DateTime!
  id: String!
  registrationField: RegistrationField
  registrationFieldId: String!
  ticketTypeId: String!
  updatedAt: DateTime!
  user: User
  userId: String!
}

input RegistrationAnswerInput {
  answer: String!
  integration: IntegrationInput
  registrationFieldId: String!
}

type RegistrationField {
  id: String!
  integration: String
  isEditable: Boolean!
  isVolunteer: Boolean!
  onlyTeams: Boolean!
  options: [String!]
  question: String!
  repeatPerAthlete: Boolean!
  requiredStatus: RequiredStatus!
  sortOrder: Int!
  ticketTypes: [TicketType!]!
  type: QuestionType!
}

input RegistrationFieldInput {
  options: [String]
  question: String!
  repeatPerAthlete: Boolean
  requiredStatus: RequiredStatus!
  type: QuestionType!
}

type RegistrationStats {
  competitions: [CompetitionWithStats]
  periodEnd: String
  periodStart: String
  totalRegistrations: Int
}

input RequestDirectoryCompEditInput {
  description: String
  email: String
  eventId: String!
  eventTitle: String!
  instagramHandle: String
  location: String
  logo: String
  price: Float
  ticketWebsite: String
  title: String
  website: String
}

enum RequiredStatus {
  OFF
  OPTIONAL
  REQUIRED
}

type ResetPasswordResponse {
  error: String
  success: Boolean
}

type ResetPasswordResult {
  error: String
  success: Boolean
}

type Score {
  createdAt: DateTime!
  entry: Entry!
  entryId: String!
  id: String!
  isCompleted: Boolean!
  note: String
  scorecard: String
  updatedAt: DateTime!
  value: String!
  workout: Workout!
  workoutId: String!
}

type ScoreSetting {
  competitionId: String!
  createdAt: DateTime!
  firstHeatStartTime: DateTime!
  handleTie: Tiebreaker!
  heatLimitType: HeatLimitType!
  heatsEveryXMinutes: Int!
  id: String!
  maxLimitPerHeat: Int!
  oneTicketPerHeat: Boolean!
  penalizeIncomplete: Boolean!
  penalizeScaled: Boolean!
  scoring: DivisionScoreType!
  ticketTypeOrderIds: [String!]!
  totalHeatsPerWorkout: Int
  updatedAt: DateTime!
}

enum ScoreType {
  REPS_LESS_IS_BETTER
  REPS_MORE_IS_BETTER
  REPS_OR_TIME_COMPLETION_BASED
  TIME_LESS_IS_BETTER
  TIME_MORE_IS_BETTER
  WEIGHT_LESS_IS_BETTER
  WEIGHT_MORE_IS_BETTER
}

input SendLoginTokenInput {
  email: String!
  redirectPath: String
}

type SentEmail {
  competitionId: String
  id: String!
  message: String!
  recipients: [String!]!
  sentAt: DateTime!
  subject: String!
  userId: String!
}

type SignupResponse {
  error: String
  user: User
}

enum SuggestedField {
  ADDRESS
  BOX
  DATE_OF_BIRTH
  EMAIL
  EMERGENCY_CONTACT_NAME
  EMERGENCY_CONTACT_NUMBER
  GENDER
  INSTAGRAM
  NAME
  PHONE
  T_SHIRT_SIZE
}

type Team {
  category: Category
  createdAt: DateTime!
  id: String!
  invitations: [Invitation!]!
  members: [TeamMember!]!
  name: String
  teamCaptain: User
  teamCaptainId: String
  updatedAt: DateTime!
}

type TeamMember {
  createdAt: DateTime!
  id: String!
  isCaptain: Boolean!
  team: Team!
  teamId: String!
  updatedAt: DateTime!
  user: User
  userId: String
}

input TeamMemberInputForInterest {
  email: String!
  name: String!
}

enum TeamMemberStatus {
  ACCEPTED
  PENDING
  REJECTED
}

enum TeamStatus {
  ACTIVE
  CANCELLED
  COMPLETED
}

type TicketType {
  allowHeatSelection: Boolean!
  competition: Competition!
  competitionId: String!
  createdAt: DateTime!
  currency: Currency!
  description: String
  divisionScoreType: DivisionScoreType
  earlyBird: EarlyBird
  earlyBirdId: String
  hasAvailability: Boolean!
  id: String!
  isTeamNameRequired: Boolean!
  isVolunteer: Boolean!
  maxEntries: Int!
  name: String!
  offerEarlyBird: Boolean!
  passOnPlatformFee: Boolean!
  price: Float!
  refundPolicy: String
  registered: Int!
  registrationFields: [RegistrationField!]!
  stripePriceId: String
  stripeProductId: String
  teamSize: Int!
  updatedAt: DateTime!
}

input TicketTypeInput {
  allowHeatSelection: Boolean
  competitionId: String!
  currency: Currency!
  description: String
  earlyBird: EarlyBirdInput
  id: String!
  isVolunteer: Boolean
  maxEntries: Int!
  name: String!
  price: Float!
  teamSize: Int!
}

enum Tiebreaker {
  BEST_OVERALL_FINISH
  NONE
  SPECIFIC_WORKOUT
}

enum Tier {
  FREE
  PRO
}

enum Unit {
  CALORIES
  FEET
  KILOGRAMS
  KILOMETERS
  METERS
  MILES
  MINUTES
  OTHER
  PLACEMENT
  POUNDS
  REPS
  ROUND
  SECONDS
}

input UpdateDirectoryCompInput {
  categories: [CategoryInput!]
  country: String
  ctaLink: String
  currency: Currency
  description: String
  email: String
  endDate: String
  id: String!
  instagramHandle: String
  location: String
  logo: String
  price: Float
  startDate: String
  ticketWebsite: String
  title: String
  website: String
}

input UpdateHeatLimitsInput {
  heatId: String!
  maxEntries: Int!
}

input UpdateNotificationSubscriptionInput {
  countries: [String]
  difficulty: String
  email: String!
  eventType: String
  gender: String
  locations: [String]
  tags: [String!]
  teamSize: String
}

input UpdatePartnerRequestInput {
  id: String!
  status: PartnerRequestStatus!
}

input UpdateTicketTypeInput {
  allowHeatSelection: Boolean
  competitionId: String!
  currency: Currency
  description: String
  earlyBird: EarlyBirdInput
  id: String!
  isVolunteer: Boolean
  maxEntries: Int
  name: String
  price: Float
  teamSize: Int
}

input UpdateWorkoutInput {
  competitionId: String
  description: String
  includeStandardsVideo: Boolean
  location: String
  name: String
  releaseDateTime: DateTime
  scoreType: ScoreType
  tiebreaker: Boolean
  timeCap: Int
  unitOfMeasurement: Unit
  videos: [WorkoutVideoInput]
}

type User {
  bio: String
  city: String
  competitionsAsAthlete: [Competition!]!
  competitionsAsCreator: [Competition!]!
  country: String
  createdAt: DateTime!
  dateOfBirth: String
  email: String!
  feedback: [Feedback!]!
  firstName: String!
  gender: String
  id: String!
  invitationId: String
  isSuperUser: Boolean!
  isVerified: Boolean!
  lastName: String
  name: String
  orgId: String
  payments: [Payment!]!
  phoneNumber: String
  picture: String
  referralCode: String
  referrals: [Referral!]!
  referredBy: String
  region: String
  registrations: [Registration!]!
  updatedAt: DateTime!
}

type UserScheduleItem {
  heat: Heat!
  workout: Workout!
}

type Workout {
  competitionId: String!
  createdAt: DateTime!
  description: String!
  id: String!
  includeStandardsVideo: Boolean!
  isVisible: Boolean!
  location: String!
  name: String!
  releaseDateTime: DateTime!
  scoreSetting: ScoreSetting!
  scoreType: ScoreType!
  scores: [Score]
  timeCap: Int!
  unitOfMeasurement: Unit!
  updatedAt: DateTime!
  videos: [WorkoutVideo]
}

type WorkoutVideo {
  createdAt: DateTime!
  description: String
  id: String!
  orderIndex: Int!
  title: String!
  updatedAt: DateTime!
  url: String!
  workoutId: String!
}

input WorkoutVideoInput {
  description: String
  orderIndex: Int
  title: String!
  url: String!
}