/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { Context } from "./../../graphql/context"
import type { core, connectionPluginCore } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * Date and time
     */
    dateTime<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "DateTime";
    /**
     * Json custom scalar type
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "Json";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * Date and time
     */
    dateTime<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "DateTime";
    /**
     * Json custom scalar type
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "Json";
    /**
     * Adds a Relay-style connection to the type, with numerous options for configuration
     *
     * @see https://nexusjs.org/docs/plugins/connection
     */
    connectionField<FieldName extends string>(
      fieldName: FieldName,
      config: connectionPluginCore.ConnectionFieldConfig<TypeName, FieldName>
    ): void
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  AddDirectoryCompCategoryInput: { // input type
    difficulty: NexusGenEnums['Difficulty']; // Difficulty!
    gender: NexusGenEnums['Gender']; // Gender!
    isSoldOut: boolean; // Boolean!
    teamSize: number; // Int!
  }
  AddDirectoryCompInput: { // input type
    categories?: NexusGenInputs['AddDirectoryCompCategoryInput'][] | null; // [AddDirectoryCompCategoryInput!]
    country?: string | null; // String
    currency?: NexusGenEnums['Currency'] | null; // Currency
    date?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    endDate?: NexusGenScalars['DateTime'] | null; // DateTime
    eventType?: string | null; // String
    format?: string | null; // String
    location?: string | null; // String
    logo?: string | null; // String
    organiserEmail: string; // String!
    price?: string | null; // String
    tags?: string[] | null; // [String!]
    title: string; // String!
    websiteUrl?: string | null; // String
  }
  BulkRegistrationInput: { // input type
    email: string; // String!
    firstName: string; // String!
    lastName: string; // String!
    teamGroupId?: string | null; // ID
    teamName?: string | null; // String
    ticketTypeId: string; // String!
  }
  CategoryInput: { // input type
    difficulty: NexusGenEnums['Difficulty']; // Difficulty!
    gender: NexusGenEnums['Gender']; // Gender!
    id: string; // String!
    isSoldOut: boolean; // Boolean!
    tags: string[]; // [String!]!
    teamSize: number; // Int!
  }
  CreateBreakInput: { // input type
    competitionId: string; // String!
    duration: number; // Int!
    startTime: NexusGenScalars['DateTime']; // DateTime!
  }
  CreateEarlyBirdInput: { // input type
    endDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
    limit?: number | null; // Int
    price?: number | null; // Float
    startDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  CreateHeatInput: { // input type
    startTime: NexusGenScalars['DateTime']; // DateTime!
    workoutId: string; // String!
  }
  CreateNotificationSubscriptionInput: { // input type
    countries?: Array<string | null> | null; // [String]
    difficulty?: string | null; // String
    email: string; // String!
    eventType?: string | null; // String
    gender?: string | null; // String
    locations?: Array<string | null> | null; // [String]
    tags?: string[] | null; // [String!]
    teamSize?: string | null; // String
  }
  CreatePartnerInterestInput: { // input type
    categoryIds?: string[] | null; // [String!]
    description?: string | null; // String
    instagram?: string | null; // String
    interestType: NexusGenEnums['PartnerInterestType']; // PartnerInterestType!
    partnerPreference: NexusGenEnums['PartnerPreference']; // PartnerPreference!
    phone?: string | null; // String
    ticketTypeIds?: string[] | null; // [String!]
    userIds: string[]; // [String!]!
  }
  CreatePartnerRequestInput: { // input type
    fromInterestId?: string | null; // String
    instagram?: string | null; // String
    message?: string | null; // String
    phone?: string | null; // String
    toInterestId: string; // String!
  }
  CreatePaymentLinkInput: { // input type
    answers: NexusGenInputs['RegistrationAnswerInput'][]; // [RegistrationAnswerInput!]!
    email: string; // String!
    invitationToken?: string | null; // String
    name: string; // String!
    redirectTo?: string | null; // String
    selectedHeatId?: string | null; // String
    ticketTypeId: string; // String!
  }
  CreateRegistrationInput: { // input type
    answers: NexusGenInputs['RegistrationAnswerInput'][]; // [RegistrationAnswerInput!]!
    email: string; // String!
    invitationToken?: string | null; // String
    name: string; // String!
    selectedHeatId?: string | null; // String
    ticketTypeId: string; // String!
  }
  CreateWorkoutInput: { // input type
    competitionId: string; // String!
    description: string; // String!
    includeStandardsVideo?: boolean | null; // Boolean
    location: string; // String!
    name: string; // String!
    releaseDateTime: NexusGenScalars['DateTime']; // DateTime!
    scoreType: NexusGenEnums['ScoreType']; // ScoreType!
    timeCap?: number | null; // Int
    unitOfMeasurement: NexusGenEnums['Unit']; // Unit!
    videos?: Array<NexusGenInputs['WorkoutVideoInput'] | null> | null; // [WorkoutVideoInput]
  }
  EarlyBirdInput: { // input type
    endDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
    id?: string | null; // String
    limit?: number | null; // Int
    price?: number | null; // Float
    startDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
    ticketTypeId: string; // String!
  }
  GenerateHeatsInput: { // input type
    firstHeatStartTime?: NexusGenScalars['DateTime'] | null; // DateTime
    heatLimitType?: NexusGenEnums['HeatLimitType'] | null; // HeatLimitType
    heatsEveryXMinutes?: number | null; // Int
    lanes?: number | null; // Int
    maxLimitPerHeat?: number | null; // Int
    oneTicketPerHeat?: boolean | null; // Boolean
    ticketTypeOrderIds?: string[] | null; // [String!]
    totalHeatsPerWorkout?: number | null; // Int
  }
  IntegrationInput: { // input type
    accessToken: string; // String!
    athleteFirstname?: string | null; // String
    athleteId: string; // String!
    athleteLastname?: string | null; // String
    athleteProfile?: string | null; // String
    expiresAt: string; // String!
    refreshToken: string; // String!
    type: string; // String!
  }
  RegistrationAnswerInput: { // input type
    answer: string; // String!
    integration?: NexusGenInputs['IntegrationInput'] | null; // IntegrationInput
    registrationFieldId: string; // String!
  }
  RegistrationFieldInput: { // input type
    options?: Array<string | null> | null; // [String]
    question: string; // String!
    repeatPerAthlete?: boolean | null; // Boolean
    requiredStatus: NexusGenEnums['RequiredStatus']; // RequiredStatus!
    type: NexusGenEnums['QuestionType']; // QuestionType!
  }
  RequestDirectoryCompEditInput: { // input type
    description?: string | null; // String
    email?: string | null; // String
    eventId: string; // String!
    eventTitle: string; // String!
    instagramHandle?: string | null; // String
    location?: string | null; // String
    logo?: string | null; // String
    price?: number | null; // Float
    ticketWebsite?: string | null; // String
    title?: string | null; // String
    website?: string | null; // String
  }
  SendLoginTokenInput: { // input type
    email: string; // String!
    redirectPath?: string | null; // String
  }
  TeamMemberInputForInterest: { // input type
    email: string; // String!
    name: string; // String!
  }
  TicketTypeInput: { // input type
    allowHeatSelection?: boolean | null; // Boolean
    competitionId: string; // String!
    currency: NexusGenEnums['Currency']; // Currency!
    description?: string | null; // String
    earlyBird?: NexusGenInputs['EarlyBirdInput'] | null; // EarlyBirdInput
    id: string; // String!
    isVolunteer?: boolean | null; // Boolean
    maxEntries: number; // Int!
    name: string; // String!
    price: number; // Float!
    teamSize: number; // Int!
  }
  UpdateDirectoryCompInput: { // input type
    categories?: NexusGenInputs['CategoryInput'][] | null; // [CategoryInput!]
    country?: string | null; // String
    ctaLink?: string | null; // String
    currency?: NexusGenEnums['Currency'] | null; // Currency
    description?: string | null; // String
    email?: string | null; // String
    endDate?: string | null; // String
    id: string; // String!
    instagramHandle?: string | null; // String
    location?: string | null; // String
    logo?: string | null; // String
    price?: number | null; // Float
    startDate?: string | null; // String
    ticketWebsite?: string | null; // String
    title?: string | null; // String
    website?: string | null; // String
  }
  UpdateHeatLimitsInput: { // input type
    heatId: string; // String!
    maxEntries: number; // Int!
  }
  UpdateNotificationSubscriptionInput: { // input type
    countries?: Array<string | null> | null; // [String]
    difficulty?: string | null; // String
    email: string; // String!
    eventType?: string | null; // String
    gender?: string | null; // String
    locations?: Array<string | null> | null; // [String]
    tags?: string[] | null; // [String!]
    teamSize?: string | null; // String
  }
  UpdatePartnerRequestInput: { // input type
    id: string; // String!
    status: NexusGenEnums['PartnerRequestStatus']; // PartnerRequestStatus!
  }
  UpdateTicketTypeInput: { // input type
    allowHeatSelection?: boolean | null; // Boolean
    competitionId: string; // String!
    currency?: NexusGenEnums['Currency'] | null; // Currency
    description?: string | null; // String
    earlyBird?: NexusGenInputs['EarlyBirdInput'] | null; // EarlyBirdInput
    id: string; // String!
    isVolunteer?: boolean | null; // Boolean
    maxEntries?: number | null; // Int
    name?: string | null; // String
    price?: number | null; // Float
    teamSize?: number | null; // Int
  }
  UpdateWorkoutInput: { // input type
    competitionId?: string | null; // String
    description?: string | null; // String
    includeStandardsVideo?: boolean | null; // Boolean
    location?: string | null; // String
    name?: string | null; // String
    releaseDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
    scoreType?: NexusGenEnums['ScoreType'] | null; // ScoreType
    tiebreaker?: boolean | null; // Boolean
    timeCap?: number | null; // Int
    unitOfMeasurement?: NexusGenEnums['Unit'] | null; // Unit
    videos?: Array<NexusGenInputs['WorkoutVideoInput'] | null> | null; // [WorkoutVideoInput]
  }
  WorkoutVideoInput: { // input type
    description?: string | null; // String
    orderIndex?: number | null; // Int
    title: string; // String!
    url: string; // String!
  }
}

export interface NexusGenEnums {
  Access: "PRIVATE" | "PUBLIC"
  AgeGroup: "ADULTS" | "MASTERS" | "OPEN" | "TEENS"
  CompetitionEditSuggestionStatus: "APPROVED" | "PENDING" | "REJECTED"
  CompetitionType: "CHARITY" | "CROSSFIT_LICENCED_EVENT" | "CROSSFIT_SEMI_FINALS" | "ELITE" | "INTERMEDIATE" | "IN_HOUSE" | "MASTERS" | "OLYMPIC_WEIGHTLIFTING" | "POWERLIFTING" | "PRIZE_AWARDED" | "QUALIFIER" | "STRONGMAN" | "TEEN" | "VIRTUAL" | "WOMENS_ONLY"
  Currency: "AED" | "AUD" | "BRL" | "CAD" | "CHF" | "CNY" | "DKK" | "EUR" | "GBP" | "HKD" | "INR" | "JPY" | "MXN" | "NOK" | "NZD" | "SEK" | "SGD" | "SR" | "THB" | "USD" | "ZAR"
  Difficulty: "ELITE" | "EVERYDAY" | "INTERMEDIATE" | "MASTERS" | "RX" | "TEEN"
  DirectoryCompType: "CROSSFIT" | "HYROX" | "HYROX_SIMULATION" | "OTHER"
  DivisionScoreType: "CUMULATIVE_UNITS" | "POINTS_PER_PLACE" | "POINT_BASED"
  Gender: "FEMALE" | "MALE" | "MIXED"
  HeatLimitType: "ATHLETES" | "ENTRIES"
  IntegrationType: "STRAVA"
  InvitationStatus: "ACCEPTED" | "EXPIRED" | "PENDING" | "REVOKED"
  PartnerInterestStatus: "ACTIVE" | "CANCELLED" | "EXPIRED" | "FILLED" | "PARTIALLY_FILLED"
  PartnerInterestTeamMemberStatus: "ACCEPTED" | "INVITED" | "REJECTED"
  PartnerInterestType: "LOOKING_FOR_JOINERS" | "LOOKING_TO_JOIN"
  PartnerPreference: "ANYONE" | "SAME_GYM"
  PartnerRequestStatus: "ACCEPTED" | "CANCELLED" | "PENDING" | "REJECTED"
  PotentialCompetitionStatus: "APPROVED" | "PENDING" | "REJECTED"
  QuestionType: "DROPDOWN" | "EMAIL" | "INTEGRATION" | "MULTIPLE_CHOICE" | "MULTIPLE_CHOICE_SELECT_ONE" | "STATEMENT" | "TEXT"
  RequiredStatus: "OFF" | "OPTIONAL" | "REQUIRED"
  ScoreType: "REPS_LESS_IS_BETTER" | "REPS_MORE_IS_BETTER" | "REPS_OR_TIME_COMPLETION_BASED" | "TIME_LESS_IS_BETTER" | "TIME_MORE_IS_BETTER" | "WEIGHT_LESS_IS_BETTER" | "WEIGHT_MORE_IS_BETTER"
  SuggestedField: "ADDRESS" | "BOX" | "DATE_OF_BIRTH" | "EMAIL" | "EMERGENCY_CONTACT_NAME" | "EMERGENCY_CONTACT_NUMBER" | "GENDER" | "INSTAGRAM" | "NAME" | "PHONE" | "T_SHIRT_SIZE"
  TeamMemberStatus: "ACCEPTED" | "PENDING" | "REJECTED"
  TeamStatus: "ACTIVE" | "CANCELLED" | "COMPLETED"
  Tiebreaker: "BEST_OVERALL_FINISH" | "NONE" | "SPECIFIC_WORKOUT"
  Tier: "FREE" | "PRO"
  Unit: "CALORIES" | "FEET" | "KILOGRAMS" | "KILOMETERS" | "METERS" | "MILES" | "MINUTES" | "OTHER" | "PLACEMENT" | "POUNDS" | "REPS" | "ROUND" | "SECONDS"
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  DateTime: any
  Json: any
}

export interface NexusGenObjects {
  Address: { // root type
    city?: string | null; // String
    country?: string | null; // String
    id?: string | null; // String
    postcode?: string | null; // String
    region?: string | null; // String
    street?: string | null; // String
    venue?: string | null; // String
  }
  AthleteCompetition: { // root type
    competitionId: string; // String!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userId: string; // String!
  }
  Category: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    difficulty: NexusGenEnums['Difficulty']; // Difficulty!
    directoryCompId: string; // String!
    gender: NexusGenEnums['Gender']; // Gender!
    id: string; // String!
    isSoldOut: boolean; // Boolean!
    price: number; // Int!
    tags?: Array<string | null> | null; // [String]
    teamSize: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Competition: { // root type
    access?: NexusGenEnums['Access'] | null; // Access
    addressId: string; // String!
    ageGroup?: NexusGenEnums['AgeGroup'] | null; // AgeGroup
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    createdByUserId: string; // String!
    currency?: NexusGenEnums['Currency'] | null; // Currency
    deadline?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    difficulty?: NexusGenEnums['Difficulty'] | null; // Difficulty
    directoryCompId?: string | null; // String
    email?: string | null; // String
    endDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
    gender?: NexusGenEnums['Gender'] | null; // Gender
    id: string; // String!
    instagramHandle?: string | null; // String
    isActive: boolean; // Boolean!
    location?: string | null; // String
    logo?: string | null; // String
    name?: string | null; // String
    price?: number | null; // Float
    registrationEnabled: boolean; // Boolean!
    source?: string | null; // String
    startDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
    timezone?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    website?: string | null; // String
  }
  CompetitionCreator: { // root type
    competitionId: string; // String!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    userId: string; // String!
  }
  CompetitionEditSuggestion: { // root type
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    reason?: string | null; // String
    reviewedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    reviewedBy?: string | null; // String
    status: NexusGenEnums['CompetitionEditSuggestionStatus']; // CompetitionEditSuggestionStatus!
    suggestedChanges: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  CompetitionFilters: { // root type
    cities: string[]; // [String!]!
    countries: string[]; // [String!]!
    teamSizes: number[]; // [Int!]!
  }
  CompetitionInvitationDetails: { // root type
    competition: NexusGenRootTypes['Competition']; // Competition!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email?: string | null; // String
    id: string; // String!
    sender?: NexusGenRootTypes['User'] | null; // User
    status: string; // String!
  }
  CompetitionPayload: { // root type
    competition?: NexusGenRootTypes['Competition'] | null; // Competition
    message?: string | null; // String
  }
  CompetitionWithStats: { // root type
    competition?: NexusGenRootTypes['Competition'] | null; // Competition
    registrationsInPeriod?: number | null; // Int
  }
  DailyRegistration: { // root type
    count: number; // Int!
    cumulativeCount: number; // Int!
    date: string; // String!
  }
  DirectoryComp: { // root type
    competitionId?: string | null; // String
    country: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    ctaLink?: string | null; // String
    currency?: NexusGenEnums['Currency'] | null; // Currency
    description?: string | null; // String
    email?: string | null; // String
    endDate?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    instagramHandle?: string | null; // String
    location: string; // String!
    logo?: string | null; // String
    price?: number | null; // Float
    region?: string | null; // String
    startDate: NexusGenScalars['DateTime']; // DateTime!
    state: string; // String!
    teamSize?: string | null; // String
    ticketWebsite?: string | null; // String
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    website?: string | null; // String
  }
  EarlyBird: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    endDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    limit?: number | null; // Int
    price: number; // Float!
    startDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
    ticketTypeId?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Entry: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    teamId?: string | null; // String
    ticketTypeId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  Feedback: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id?: string | null; // String
    text?: string | null; // String
    userId?: string | null; // String
  }
  ForgotPasswordResponse: { // root type
    error?: string | null; // String
    success?: boolean | null; // Boolean
  }
  Heat: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    startTime: NexusGenScalars['DateTime']; // DateTime!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    workoutId: string; // String!
  }
  HeatTicketTypes: { // root type
    heatId: string; // String!
    ticketTypeId: string; // String!
  }
  Integration: { // root type
    accessToken: string; // String!
    athleteFirstname?: string | null; // String
    athleteId: string; // String!
    athleteLastname?: string | null; // String
    athleteProfile?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    expiresAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    refreshToken: string; // String!
    registrationAnswerId: string; // String!
    type: NexusGenEnums['IntegrationType']; // IntegrationType!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Invitation: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email?: string | null; // String
    id: string; // String!
    sentByUserId: string; // String!
    teamId: string; // String!
    token: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Lane: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    entryId: string; // String!
    heatId: string; // String!
    id: string; // String!
    number: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  LoginResponse: { // root type
    error?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  LogoutPayload: { // root type
    message?: string | null; // String
    success?: boolean | null; // Boolean
  }
  Mutation: {};
  NotificationSubscription: { // root type
    countries?: Array<string | null> | null; // [String]
    difficulty?: string | null; // String
    email: string; // String!
    eventType?: string | null; // String
    gender?: string | null; // String
    id: string; // String!
    locations?: Array<string | null> | null; // [String]
    tags?: string[] | null; // [String!]
    teamSize?: string | null; // String
    userId?: string | null; // String
  }
  Org: { // root type
    contactNumber?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    description?: string | null; // String
    email: string; // String!
    facebook?: string | null; // String
    id?: string | null; // String
    instagram?: string | null; // String
    logo?: string | null; // String
    name?: string | null; // String
    twitter?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    website?: string | null; // String
    youtube?: string | null; // String
  }
  PartnerInterest: { // root type
    categoryId?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    id: string; // String!
    instagram?: string | null; // String
    interestType: NexusGenEnums['PartnerInterestType']; // PartnerInterestType!
    partnerPreference: NexusGenEnums['PartnerPreference']; // PartnerPreference!
    phone?: string | null; // String
    status: string; // String!
    ticketTypeId?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  PartnerInterestTeamMember: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // String!
    invitationToken?: string | null; // String
    name: string; // String!
    partnerInterestId: string; // String!
    status: NexusGenEnums['PartnerInterestTeamMemberStatus']; // PartnerInterestTeamMemberStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId?: string | null; // String
  }
  PartnerRequest: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fromInterestId?: string | null; // String
    fromUserId?: string | null; // String
    id: string; // String!
    instagram?: string | null; // String
    message?: string | null; // String
    phone?: string | null; // String
    status: NexusGenEnums['PartnerRequestStatus']; // PartnerRequestStatus!
    toInterestId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Payment: { // root type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    currency: string; // String!
    id: string; // String!
    paymentIntentId: string; // String!
    registrationId: string; // String!
    status: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  PaymentCompetitionMapping: { // root type
    amount?: string | null; // String
    competition?: NexusGenRootTypes['Competition'] | null; // Competition
    currency?: string | null; // String
    date?: string | null; // String
    email?: string | null; // String
    ticketType?: NexusGenRootTypes['TicketType'] | null; // TicketType
    transactionId?: string | null; // String
  }
  PotentialCompetition: { // root type
    addressId?: string | null; // String
    country?: string | null; // String
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    currency?: string | null; // String
    description?: string | null; // String
    email?: string | null; // String
    endDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    instagramHandle?: string | null; // String
    logo?: string | null; // String
    name: string; // String!
    orgName?: string | null; // String
    region?: string | null; // String
    reviewedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    reviewedBy?: string | null; // String
    source: string; // String!
    startDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
    state?: string | null; // String
    status: NexusGenEnums['PotentialCompetitionStatus']; // PotentialCompetitionStatus!
    timezone?: string | null; // String
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
    website?: string | null; // String
  }
  PotentialTicketType: { // root type
    allowHeatSelection: boolean; // Boolean!
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    currency?: string | null; // String
    description?: string | null; // String
    id: string; // String!
    isVolunteer: boolean; // Boolean!
    maxEntries: number; // Int!
    name: string; // String!
    passOnPlatformFee: boolean; // Boolean!
    potentialCompetitionId: string; // String!
    teamSize: number; // Int!
    updatedAt?: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: {};
  Referral: { // root type
    createdAt?: NexusGenScalars['DateTime'] | null; // DateTime
    id?: string | null; // String
    referredId?: string | null; // String
    referrerId?: string | null; // String
  }
  Registration: { // root type
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    isCheckedIn: boolean; // Boolean!
    ticketTypeId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  RegistrationAnswer: { // root type
    answer: string; // String!
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    registrationFieldId: string; // String!
    ticketTypeId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId: string; // String!
  }
  RegistrationField: { // root type
    id: string; // String!
    isEditable: boolean; // Boolean!
    isVolunteer: boolean; // Boolean!
    options?: string[] | null; // [String!]
    question: string; // String!
    repeatPerAthlete: boolean; // Boolean!
    sortOrder: number; // Int!
  }
  RegistrationStats: { // root type
    competitions?: Array<NexusGenRootTypes['CompetitionWithStats'] | null> | null; // [CompetitionWithStats]
    periodEnd?: string | null; // String
    periodStart?: string | null; // String
    totalRegistrations?: number | null; // Int
  }
  ResetPasswordResponse: { // root type
    error?: string | null; // String
    success?: boolean | null; // Boolean
  }
  ResetPasswordResult: { // root type
    error?: string | null; // String
    success?: boolean | null; // Boolean
  }
  Score: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    entryId: string; // String!
    id: string; // String!
    isCompleted: boolean; // Boolean!
    note?: string | null; // String
    scorecard?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    value: string; // String!
    workoutId: string; // String!
  }
  ScoreSetting: { // root type
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    heatLimitType: NexusGenEnums['HeatLimitType']; // HeatLimitType!
    heatsEveryXMinutes: number; // Int!
    id: string; // String!
    maxLimitPerHeat: number; // Int!
    oneTicketPerHeat: boolean; // Boolean!
    penalizeIncomplete: boolean; // Boolean!
    penalizeScaled: boolean; // Boolean!
    totalHeatsPerWorkout?: number | null; // Int
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  SentEmail: { // root type
    competitionId?: string | null; // String
    id: string; // String!
    message: string; // String!
    recipients: string[]; // [String!]!
    sentAt: NexusGenScalars['DateTime']; // DateTime!
    subject: string; // String!
    userId: string; // String!
  }
  SignupResponse: { // root type
    error?: string | null; // String
    user?: NexusGenRootTypes['User'] | null; // User
  }
  Team: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    name?: string | null; // String
    teamCaptainId?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  TeamMember: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    userId?: string | null; // String
  }
  TicketType: { // root type
    allowHeatSelection: boolean; // Boolean!
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    currency: NexusGenEnums['Currency']; // Currency!
    description?: string | null; // String
    divisionScoreType?: NexusGenEnums['DivisionScoreType'] | null; // DivisionScoreType
    earlyBirdId?: string | null; // String
    id: string; // String!
    isVolunteer: boolean; // Boolean!
    maxEntries: number; // Int!
    name: string; // String!
    passOnPlatformFee: boolean; // Boolean!
    price: number; // Float!
    refundPolicy?: string | null; // String
    stripePriceId?: string | null; // String
    stripeProductId?: string | null; // String
    teamSize: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // root type
    bio?: string | null; // String
    city?: string | null; // String
    country?: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    dateOfBirth?: string | null; // String
    email: string; // String!
    firstName: string; // String!
    gender?: string | null; // String
    id: string; // String!
    invitationId?: string | null; // String
    isSuperUser: boolean; // Boolean!
    isVerified: boolean; // Boolean!
    lastName?: string | null; // String
    orgId?: string | null; // String
    phoneNumber?: string | null; // String
    picture?: string | null; // String
    referralCode?: string | null; // String
    referredBy?: string | null; // String
    region?: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserScheduleItem: { // root type
    heat: NexusGenRootTypes['Heat']; // Heat!
    workout: NexusGenRootTypes['Workout']; // Workout!
  }
  Workout: { // root type
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // String!
    includeStandardsVideo: boolean; // Boolean!
    isVisible: boolean; // Boolean!
    location: string; // String!
    name: string; // String!
    releaseDateTime: NexusGenScalars['DateTime']; // DateTime!
    unitOfMeasurement: NexusGenEnums['Unit']; // Unit!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  WorkoutVideo: { // root type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description?: string | null; // String
    id: string; // String!
    orderIndex: number; // Int!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    url: string; // String!
    workoutId: string; // String!
  }
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars & NexusGenEnums

export interface NexusGenFieldTypes {
  Address: { // field return type
    city: string | null; // String
    country: string | null; // String
    id: string | null; // String
    postcode: string | null; // String
    region: string | null; // String
    street: string | null; // String
    venue: string | null; // String
  }
  AthleteCompetition: { // field return type
    competition: NexusGenRootTypes['Competition'] | null; // Competition
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  Category: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    difficulty: NexusGenEnums['Difficulty']; // Difficulty!
    directoryComp: NexusGenRootTypes['DirectoryComp'] | null; // DirectoryComp
    directoryCompId: string; // String!
    gender: NexusGenEnums['Gender']; // Gender!
    id: string; // String!
    isSoldOut: boolean; // Boolean!
    price: number; // Int!
    tags: Array<string | null> | null; // [String]
    teamSize: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Competition: { // field return type
    access: NexusGenEnums['Access'] | null; // Access
    address: NexusGenRootTypes['Address']; // Address!
    addressId: string; // String!
    ageGroup: NexusGenEnums['AgeGroup'] | null; // AgeGroup
    athletes: Array<NexusGenRootTypes['AthleteCompetition'] | null> | null; // [AthleteCompetition]
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    createdBy: NexusGenRootTypes['User'] | null; // User
    createdByUserId: string; // String!
    creators: Array<NexusGenRootTypes['CompetitionCreator'] | null> | null; // [CompetitionCreator]
    currency: NexusGenEnums['Currency'] | null; // Currency
    deadline: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    difficulty: NexusGenEnums['Difficulty'] | null; // Difficulty
    directoryComp: NexusGenRootTypes['DirectoryComp'] | null; // DirectoryComp
    directoryCompId: string | null; // String
    earlyBird: NexusGenRootTypes['EarlyBird'] | null; // EarlyBird
    email: string | null; // String
    endDateTime: NexusGenScalars['DateTime'] | null; // DateTime
    gender: NexusGenEnums['Gender'] | null; // Gender
    hasWorkouts: boolean; // Boolean!
    id: string; // String!
    instagramHandle: string | null; // String
    isActive: boolean; // Boolean!
    lastTicketType: NexusGenRootTypes['TicketType'] | null; // TicketType
    location: string | null; // String
    logo: string | null; // String
    name: string | null; // String
    org: NexusGenRootTypes['Org'] | null; // Org
    orgName: string | null; // String
    participantsCount: number; // Int!
    price: number | null; // Float
    registrationEnabled: boolean; // Boolean!
    registrationTrend: Array<NexusGenRootTypes['DailyRegistration'] | null> | null; // [DailyRegistration]
    registrationsCount: number; // Int!
    releaseDateTime: NexusGenScalars['DateTime'] | null; // DateTime
    source: string | null; // String
    startDateTime: NexusGenScalars['DateTime'] | null; // DateTime
    teamsCount: number; // Int!
    ticketTypes: Array<NexusGenRootTypes['TicketType'] | null> | null; // [TicketType]
    timezone: string | null; // String
    types: Array<NexusGenEnums['CompetitionType'] | null> | null; // [CompetitionType]
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    website: string | null; // String
  }
  CompetitionCreator: { // field return type
    competition: NexusGenRootTypes['Competition'] | null; // Competition
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  CompetitionEditSuggestion: { // field return type
    competition: NexusGenRootTypes['Competition'] | null; // Competition
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    reason: string | null; // String
    reviewedAt: NexusGenScalars['DateTime'] | null; // DateTime
    reviewedBy: string | null; // String
    reviewer: NexusGenRootTypes['User'] | null; // User
    status: NexusGenEnums['CompetitionEditSuggestionStatus']; // CompetitionEditSuggestionStatus!
    suggestedChanges: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  CompetitionFilters: { // field return type
    cities: string[]; // [String!]!
    countries: string[]; // [String!]!
    teamSizes: number[]; // [Int!]!
  }
  CompetitionInvitationDetails: { // field return type
    competition: NexusGenRootTypes['Competition']; // Competition!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string | null; // String
    id: string; // String!
    sender: NexusGenRootTypes['User'] | null; // User
    status: string; // String!
  }
  CompetitionPayload: { // field return type
    competition: NexusGenRootTypes['Competition'] | null; // Competition
    message: string | null; // String
  }
  CompetitionWithStats: { // field return type
    competition: NexusGenRootTypes['Competition'] | null; // Competition
    registrationsInPeriod: number | null; // Int
  }
  DailyRegistration: { // field return type
    count: number; // Int!
    cumulativeCount: number; // Int!
    date: string; // String!
  }
  DirectoryComp: { // field return type
    categories: NexusGenRootTypes['Category'][] | null; // [Category!]
    competition: NexusGenRootTypes['Competition'] | null; // Competition
    competitionId: string | null; // String
    country: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    ctaLink: string | null; // String
    currency: NexusGenEnums['Currency'] | null; // Currency
    description: string | null; // String
    email: string | null; // String
    endDate: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    instagramHandle: string | null; // String
    location: string; // String!
    logo: string | null; // String
    price: number | null; // Float
    region: string | null; // String
    startDate: NexusGenScalars['DateTime']; // DateTime!
    state: string; // String!
    teamSize: string | null; // String
    ticketWebsite: string | null; // String
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    website: string | null; // String
  }
  EarlyBird: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    endDateTime: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    limit: number | null; // Int
    price: number; // Float!
    startDateTime: NexusGenScalars['DateTime'] | null; // DateTime
    ticketTypeId: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Entry: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    invitationToken: string | null; // String
    laneByWorkoutId: NexusGenRootTypes['Lane'] | null; // Lane
    name: string; // String!
    score: NexusGenRootTypes['Score'] | null; // Score
    scores: NexusGenRootTypes['Score'][]; // [Score!]!
    team: NexusGenRootTypes['Team'] | null; // Team
    teamId: string | null; // String
    ticketType: NexusGenRootTypes['TicketType']; // TicketType!
    ticketTypeId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  Feedback: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string | null; // String
    text: string | null; // String
    userId: string | null; // String
  }
  ForgotPasswordResponse: { // field return type
    error: string | null; // String
    success: boolean | null; // Boolean
  }
  Heat: { // field return type
    allTicketTypes: NexusGenRootTypes['TicketType'][]; // [TicketType!]!
    availableLanes: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    heatLimitType: NexusGenEnums['HeatLimitType']; // HeatLimitType!
    id: string; // String!
    lanes: NexusGenRootTypes['Lane'][]; // [Lane!]!
    maxLimitPerHeat: number; // Int!
    name: string; // String!
    registrationsCount: number; // Int!
    startTime: NexusGenScalars['DateTime']; // DateTime!
    ticketTypes: NexusGenRootTypes['TicketType'][]; // [TicketType!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    workout: NexusGenRootTypes['Workout'] | null; // Workout
    workoutId: string; // String!
  }
  HeatTicketTypes: { // field return type
    heatId: string; // String!
    ticketTypeId: string; // String!
  }
  Integration: { // field return type
    accessToken: string; // String!
    athleteFirstname: string | null; // String
    athleteId: string; // String!
    athleteLastname: string | null; // String
    athleteProfile: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    expiresAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    refreshToken: string; // String!
    registrationAnswerId: string; // String!
    type: NexusGenEnums['IntegrationType']; // IntegrationType!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Invitation: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string | null; // String
    id: string; // String!
    sentBy: NexusGenRootTypes['User'] | null; // User
    sentByUserId: string; // String!
    status: NexusGenEnums['InvitationStatus']; // InvitationStatus!
    team: NexusGenRootTypes['Team'] | null; // Team
    teamId: string; // String!
    token: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Lane: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    entry: NexusGenRootTypes['Entry']; // Entry!
    entryId: string; // String!
    heat: NexusGenRootTypes['Heat']; // Heat!
    heatId: string; // String!
    id: string; // String!
    number: number; // Int!
    score: NexusGenRootTypes['Score'] | null; // Score
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  LoginResponse: { // field return type
    error: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  LogoutPayload: { // field return type
    message: string | null; // String
    success: boolean | null; // Boolean
  }
  Mutation: { // field return type
    acceptCompetitionInvitation: boolean | null; // Boolean
    addDirectoryComp: boolean | null; // Boolean
    adminResetPassword: NexusGenRootTypes['ResetPasswordResult'] | null; // ResetPasswordResult
    approvePotentialCompetitions: string | null; // String
    assignEntryToHeat: NexusGenRootTypes['Lane'] | null; // Lane
    checkInAthlete: NexusGenRootTypes['Registration'] | null; // Registration
    cloneCompetition: NexusGenRootTypes['Competition'] | null; // Competition
    createBreak: boolean; // Boolean!
    createBulkRegistrations: Array<NexusGenRootTypes['User'] | null>; // [User]!
    createComp: NexusGenRootTypes['CompetitionPayload'] | null; // CompetitionPayload
    createHeats: NexusGenRootTypes['Heat'][]; // [Heat!]!
    createNotificationSubscription: NexusGenRootTypes['NotificationSubscription'] | null; // NotificationSubscription
    createPartnerInterest: Array<NexusGenRootTypes['PartnerInterest'] | null> | null; // [PartnerInterest]
    createPartnerInterestTeamMembers: Array<NexusGenRootTypes['PartnerInterestTeamMember'] | null> | null; // [PartnerInterestTeamMember]
    createPartnerRequest: NexusGenRootTypes['PartnerRequest'] | null; // PartnerRequest
    createPaymentLink: string | null; // String
    createReferral: NexusGenRootTypes['Referral'] | null; // Referral
    createRegistration: NexusGenRootTypes['User'] | null; // User
    createRegistrationField: NexusGenRootTypes['RegistrationField'] | null; // RegistrationField
    createScore: NexusGenRootTypes['Score']; // Score!
    createTicketType: NexusGenRootTypes['TicketType'] | null; // TicketType
    createVolunteerTicketType: NexusGenRootTypes['TicketType'] | null; // TicketType
    createWorkout: NexusGenRootTypes['Workout'] | null; // Workout
    createWorkoutVideo: NexusGenRootTypes['WorkoutVideo'] | null; // WorkoutVideo
    deleteCompetition: boolean | null; // Boolean
    deleteDirectoryComp: boolean | null; // Boolean
    deleteHeat: NexusGenRootTypes['Heat'] | null; // Heat
    deleteRegistration: boolean | null; // Boolean
    deleteRegistrationField: string | null; // String
    deleteTeam: boolean | null; // Boolean
    deleteTicketType: NexusGenRootTypes['TicketType'] | null; // TicketType
    deleteVolunteerTicket: string | null; // String
    deleteWorkout: NexusGenRootTypes['Workout'] | null; // Workout
    deleteWorkoutVideo: boolean | null; // Boolean
    duplicateTicketType: NexusGenRootTypes['TicketType'] | null; // TicketType
    forgotPassword: NexusGenRootTypes['ForgotPasswordResponse'] | null; // ForgotPasswordResponse
    generateHeatsFromSettings: NexusGenRootTypes['Heat'][] | null; // [Heat!]
    importDirectoryComp: boolean; // Boolean!
    inviteToCompetition: boolean | null; // Boolean
    linkDirectoryCompToCompetition: boolean | null; // Boolean
    login: NexusGenRootTypes['LoginResponse'] | null; // LoginResponse
    logout: NexusGenRootTypes['LogoutPayload'] | null; // LogoutPayload
    moveAthleteToTeam: boolean | null; // Boolean
    rejectPotentialCompetitions: string | null; // String
    requestDirectoryCompEdit: boolean | null; // Boolean
    resendInvitation: boolean | null; // Boolean
    resetPassword: NexusGenRootTypes['ResetPasswordResponse'] | null; // ResetPasswordResponse
    scheduleDayBeforeEventEmail: boolean; // Boolean!
    sendBulkEmail: boolean; // Boolean!
    sendEmails: boolean | null; // Boolean
    sendInvitations: boolean | null; // Boolean
    sendLoginToken: boolean; // Boolean!
    signUp: NexusGenRootTypes['SignupResponse'] | null; // SignupResponse
    submitFeedback: NexusGenRootTypes['Feedback'] | null; // Feedback
    suggestCompetitionEdit: string | null; // String
    suggestNewCompetition: string | null; // String
    unassignAllEntries: boolean; // Boolean!
    unassignEntry: NexusGenRootTypes['Lane'] | null; // Lane
    unlinkDirectoryCompFromCompetition: boolean | null; // Boolean
    updateCompetition: NexusGenRootTypes['Competition'] | null; // Competition
    updateDirectoryComp: NexusGenRootTypes['DirectoryComp'] | null; // DirectoryComp
    updateDirectoryCompStates: Array<NexusGenRootTypes['DirectoryComp'] | null>; // [DirectoryComp]!
    updateEarlyBird: NexusGenRootTypes['EarlyBird'] | null; // EarlyBird
    updateHeat: NexusGenRootTypes['Heat'] | null; // Heat
    updateHeatLimits: NexusGenRootTypes['Heat'][]; // [Heat!]!
    updateInvitation: NexusGenRootTypes['Invitation'] | null; // Invitation
    updateLaneHeat: NexusGenRootTypes['Lane'] | null; // Lane
    updateLaneOrder: NexusGenRootTypes['Lane'] | null; // Lane
    updateNotificationSubscription: NexusGenRootTypes['NotificationSubscription'] | null; // NotificationSubscription
    updatePartnerInterest: NexusGenRootTypes['PartnerInterest'] | null; // PartnerInterest
    updatePartnerRequest: NexusGenRootTypes['PartnerRequest'] | null; // PartnerRequest
    updatePotentialCompetition: string | null; // String
    updateRegistrationField: NexusGenRootTypes['RegistrationField'] | null; // RegistrationField
    updateScoreById: NexusGenRootTypes['Score']; // Score!
    updateTeam: NexusGenRootTypes['Team'] | null; // Team
    updateTicketType: NexusGenRootTypes['TicketType'] | null; // TicketType
    updateUser: NexusGenRootTypes['User'] | null; // User
    updateUserBio: NexusGenRootTypes['User'] | null; // User
    updateUserById: NexusGenRootTypes['User'] | null; // User
    updateWorkout: NexusGenRootTypes['Workout'] | null; // Workout
    updateWorkoutVideo: NexusGenRootTypes['WorkoutVideo'] | null; // WorkoutVideo
    updateWorkoutVisibility: NexusGenRootTypes['Workout'] | null; // Workout
    uploadCompetitionLogo: NexusGenRootTypes['Competition'] | null; // Competition
    uploadOrgImage: NexusGenRootTypes['Org'] | null; // Org
    uploadUserAvatar: NexusGenRootTypes['User'] | null; // User
  }
  NotificationSubscription: { // field return type
    countries: Array<string | null> | null; // [String]
    difficulty: string | null; // String
    email: string; // String!
    eventType: string | null; // String
    gender: string | null; // String
    id: string; // String!
    locations: Array<string | null> | null; // [String]
    tags: string[] | null; // [String!]
    teamSize: string | null; // String
    userId: string | null; // String
  }
  Org: { // field return type
    contactNumber: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    description: string | null; // String
    email: string; // String!
    facebook: string | null; // String
    id: string | null; // String
    instagram: string | null; // String
    logo: string | null; // String
    name: string | null; // String
    twitter: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    website: string | null; // String
    youtube: string | null; // String
  }
  PartnerInterest: { // field return type
    category: NexusGenRootTypes['Category'] | null; // Category
    categoryId: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    id: string; // String!
    instagram: string | null; // String
    interestType: NexusGenEnums['PartnerInterestType']; // PartnerInterestType!
    partnerPreference: NexusGenEnums['PartnerPreference']; // PartnerPreference!
    partnerRequests: Array<NexusGenRootTypes['PartnerRequest'] | null> | null; // [PartnerRequest]
    phone: string | null; // String
    status: string; // String!
    teamMembers: Array<NexusGenRootTypes['PartnerInterestTeamMember'] | null> | null; // [PartnerInterestTeamMember]
    ticketType: NexusGenRootTypes['TicketType'] | null; // TicketType
    ticketTypeId: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  PartnerInterestTeamMember: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    email: string; // String!
    id: string; // String!
    invitationToken: string | null; // String
    name: string; // String!
    partnerInterest: NexusGenRootTypes['PartnerInterest'] | null; // PartnerInterest
    partnerInterestId: string; // String!
    status: NexusGenEnums['PartnerInterestTeamMemberStatus']; // PartnerInterestTeamMemberStatus!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // String
  }
  PartnerRequest: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    fromInterest: NexusGenRootTypes['PartnerInterest'] | null; // PartnerInterest
    fromInterestId: string | null; // String
    fromUser: NexusGenRootTypes['User'] | null; // User
    fromUserId: string | null; // String
    id: string; // String!
    instagram: string | null; // String
    message: string | null; // String
    phone: string | null; // String
    status: NexusGenEnums['PartnerRequestStatus']; // PartnerRequestStatus!
    toInterest: NexusGenRootTypes['PartnerInterest'] | null; // PartnerInterest
    toInterestId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  Payment: { // field return type
    amount: number; // Int!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    currency: string; // String!
    id: string; // String!
    paymentIntentId: string; // String!
    registrationId: string; // String!
    status: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  PaymentCompetitionMapping: { // field return type
    amount: string | null; // String
    competition: NexusGenRootTypes['Competition'] | null; // Competition
    currency: string | null; // String
    date: string | null; // String
    email: string | null; // String
    ticketType: NexusGenRootTypes['TicketType'] | null; // TicketType
    transactionId: string | null; // String
  }
  PotentialCompetition: { // field return type
    address: NexusGenRootTypes['Address'] | null; // Address
    addressId: string | null; // String
    country: string | null; // String
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    currency: string | null; // String
    description: string | null; // String
    email: string | null; // String
    endDateTime: NexusGenScalars['DateTime'] | null; // DateTime
    id: string; // String!
    instagramHandle: string | null; // String
    logo: string | null; // String
    name: string; // String!
    orgName: string | null; // String
    potentialTicketTypes: Array<NexusGenRootTypes['PotentialTicketType'] | null> | null; // [PotentialTicketType]
    price: number | null; // Float
    region: string | null; // String
    reviewedAt: NexusGenScalars['DateTime'] | null; // DateTime
    reviewedBy: string | null; // String
    reviewer: NexusGenRootTypes['User'] | null; // User
    scrapedData: string | null; // String
    source: string; // String!
    startDateTime: NexusGenScalars['DateTime'] | null; // DateTime
    state: string | null; // String
    status: NexusGenEnums['PotentialCompetitionStatus']; // PotentialCompetitionStatus!
    timezone: string | null; // String
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
    website: string | null; // String
  }
  PotentialTicketType: { // field return type
    allowHeatSelection: boolean; // Boolean!
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    currency: string | null; // String
    description: string | null; // String
    id: string; // String!
    isVolunteer: boolean; // Boolean!
    maxEntries: number; // Int!
    name: string; // String!
    passOnPlatformFee: boolean; // Boolean!
    potentialCompetitionId: string; // String!
    price: number; // Float!
    teamSize: number; // Int!
    updatedAt: NexusGenScalars['DateTime'] | null; // DateTime
  }
  Query: { // field return type
    checkReferralCode: boolean | null; // Boolean
    earlyBirdById: NexusGenRootTypes['EarlyBird'] | null; // EarlyBird
    getAllDirectoryComps: NexusGenRootTypes['DirectoryComp'][]; // [DirectoryComp!]!
    getAvailableHeatsByCompetitionId: NexusGenRootTypes['Heat'][]; // [Heat!]!
    getAvailableTeamsForMove: NexusGenRootTypes['Team'][]; // [Team!]!
    getCompetitionById: NexusGenRootTypes['Competition'] | null; // Competition
    getCompetitionFilters: NexusGenRootTypes['CompetitionFilters'] | null; // CompetitionFilters
    getCompetitionInvitation: NexusGenRootTypes['CompetitionInvitationDetails'] | null; // CompetitionInvitationDetails
    getCompetitionsByIds: NexusGenRootTypes['Competition'][]; // [Competition!]!
    getCompetitionsByUser: NexusGenRootTypes['Competition'][]; // [Competition!]!
    getDirectoryComp: NexusGenRootTypes['DirectoryComp'] | null; // DirectoryComp
    getDirectoryComps: NexusGenRootTypes['DirectoryComp'][]; // [DirectoryComp!]!
    getEntriesByCompetitionId: NexusGenRootTypes['Entry'][]; // [Entry!]!
    getEntriesByWorkoutId: NexusGenRootTypes['Entry'][]; // [Entry!]!
    getEntryByUserAndCompetition: NexusGenRootTypes['Entry'] | null; // Entry
    getExploreCompetitions: NexusGenRootTypes['Competition'][]; // [Competition!]!
    getHeatById: NexusGenRootTypes['Heat']; // Heat!
    getHeatTicketTypesByHeatId: NexusGenRootTypes['HeatTicketTypes'][]; // [HeatTicketTypes!]!
    getHeatsByCompetitionId: NexusGenRootTypes['Heat'][]; // [Heat!]!
    getHeatsByWorkoutId: NexusGenRootTypes['Heat'][]; // [Heat!]!
    getIntegration: NexusGenRootTypes['Integration'] | null; // Integration
    getIntegrationByRegistrationAnswerId: NexusGenRootTypes['Integration'] | null; // Integration
    getInvitationByToken: NexusGenRootTypes['Invitation'] | null; // Invitation
    getInvitationsByTeamId: NexusGenRootTypes['Invitation'][]; // [Invitation!]!
    getLaneById: NexusGenRootTypes['Lane']; // Lane!
    getLanesByHeatId: NexusGenRootTypes['Lane'][]; // [Lane!]!
    getMyCompetitionsAsAthlete: NexusGenRootTypes['Competition'][]; // [Competition!]!
    getMyCompetitionsAsCreator: NexusGenRootTypes['Competition'][]; // [Competition!]!
    getNotificationSubscription: NexusGenRootTypes['NotificationSubscription'] | null; // NotificationSubscription
    getPartnerInterests: Array<NexusGenRootTypes['PartnerInterest'] | null> | null; // [PartnerInterest]
    getPartnerRequests: Array<NexusGenRootTypes['PartnerRequest'] | null> | null; // [PartnerRequest]
    getPaymentMappings: Array<NexusGenRootTypes['PaymentCompetitionMapping'] | null> | null; // [PaymentCompetitionMapping]
    getPotentialCompetition: NexusGenRootTypes['PotentialCompetition'] | null; // PotentialCompetition
    getPotentialCompetitions: NexusGenRootTypes['PotentialCompetition'][]; // [PotentialCompetition!]!
    getRegistrantById: NexusGenRootTypes['Registration']; // Registration!
    getRegistrationFieldsByCompetitionId: NexusGenRootTypes['RegistrationField'][]; // [RegistrationField!]!
    getRegistrationStats: NexusGenRootTypes['RegistrationStats'] | null; // RegistrationStats
    getRegistrationsByCompetitionId: NexusGenRootTypes['Registration'][]; // [Registration!]!
    getScoreSettingByCompetitionId: NexusGenRootTypes['ScoreSetting']; // ScoreSetting!
    getScoreSettingById: NexusGenRootTypes['ScoreSetting']; // ScoreSetting!
    getScoresByWorkoutId: NexusGenRootTypes['Score'][]; // [Score!]!
    getSentEmails: NexusGenRootTypes['SentEmail'][]; // [SentEmail!]!
    getTicketTypeById: NexusGenRootTypes['TicketType'] | null; // TicketType
    getTicketTypesByCompetitionId: NexusGenRootTypes['TicketType'][]; // [TicketType!]!
    getUnassignedEntriesByCompetitionId: NexusGenRootTypes['Entry'][]; // [Entry!]!
    getUser: NexusGenRootTypes['User'] | null; // User
    getUserSchedule: NexusGenRootTypes['UserScheduleItem'][]; // [UserScheduleItem!]!
    getViewer: NexusGenRootTypes['User'] | null; // User
    getWorkoutById: NexusGenRootTypes['Workout']; // Workout!
    getWorkoutsByCompetitionId: NexusGenRootTypes['Workout'][]; // [Workout!]!
    isUserRegisteredForCompetition: boolean; // Boolean!
  }
  Referral: { // field return type
    createdAt: NexusGenScalars['DateTime'] | null; // DateTime
    id: string | null; // String
    referredId: string | null; // String
    referrerId: string | null; // String
  }
  Registration: { // field return type
    competition: NexusGenRootTypes['Competition']; // Competition!
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    isCheckedIn: boolean; // Boolean!
    registrationAnswers: NexusGenRootTypes['RegistrationAnswer'][]; // [RegistrationAnswer!]!
    registrationFields: NexusGenRootTypes['RegistrationField'][]; // [RegistrationField!]!
    team: NexusGenRootTypes['Team'] | null; // Team
    teamName: string | null; // String
    ticketType: NexusGenRootTypes['TicketType']; // TicketType!
    ticketTypeId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User']; // User!
    userId: string; // String!
  }
  RegistrationAnswer: { // field return type
    answer: string; // String!
    competition: NexusGenRootTypes['Competition'] | null; // Competition
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    registrationField: NexusGenRootTypes['RegistrationField'] | null; // RegistrationField
    registrationFieldId: string; // String!
    ticketTypeId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string; // String!
  }
  RegistrationField: { // field return type
    id: string; // String!
    integration: string | null; // String
    isEditable: boolean; // Boolean!
    isVolunteer: boolean; // Boolean!
    onlyTeams: boolean; // Boolean!
    options: string[] | null; // [String!]
    question: string; // String!
    repeatPerAthlete: boolean; // Boolean!
    requiredStatus: NexusGenEnums['RequiredStatus']; // RequiredStatus!
    sortOrder: number; // Int!
    ticketTypes: NexusGenRootTypes['TicketType'][]; // [TicketType!]!
    type: NexusGenEnums['QuestionType']; // QuestionType!
  }
  RegistrationStats: { // field return type
    competitions: Array<NexusGenRootTypes['CompetitionWithStats'] | null> | null; // [CompetitionWithStats]
    periodEnd: string | null; // String
    periodStart: string | null; // String
    totalRegistrations: number | null; // Int
  }
  ResetPasswordResponse: { // field return type
    error: string | null; // String
    success: boolean | null; // Boolean
  }
  ResetPasswordResult: { // field return type
    error: string | null; // String
    success: boolean | null; // Boolean
  }
  Score: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    entry: NexusGenRootTypes['Entry']; // Entry!
    entryId: string; // String!
    id: string; // String!
    isCompleted: boolean; // Boolean!
    note: string | null; // String
    scorecard: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    value: string; // String!
    workout: NexusGenRootTypes['Workout']; // Workout!
    workoutId: string; // String!
  }
  ScoreSetting: { // field return type
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    firstHeatStartTime: NexusGenScalars['DateTime']; // DateTime!
    handleTie: NexusGenEnums['Tiebreaker']; // Tiebreaker!
    heatLimitType: NexusGenEnums['HeatLimitType']; // HeatLimitType!
    heatsEveryXMinutes: number; // Int!
    id: string; // String!
    maxLimitPerHeat: number; // Int!
    oneTicketPerHeat: boolean; // Boolean!
    penalizeIncomplete: boolean; // Boolean!
    penalizeScaled: boolean; // Boolean!
    scoring: NexusGenEnums['DivisionScoreType']; // DivisionScoreType!
    ticketTypeOrderIds: string[]; // [String!]!
    totalHeatsPerWorkout: number | null; // Int
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  SentEmail: { // field return type
    competitionId: string | null; // String
    id: string; // String!
    message: string; // String!
    recipients: string[]; // [String!]!
    sentAt: NexusGenScalars['DateTime']; // DateTime!
    subject: string; // String!
    userId: string; // String!
  }
  SignupResponse: { // field return type
    error: string | null; // String
    user: NexusGenRootTypes['User'] | null; // User
  }
  Team: { // field return type
    category: NexusGenRootTypes['Category'] | null; // Category
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    invitations: NexusGenRootTypes['Invitation'][]; // [Invitation!]!
    members: NexusGenRootTypes['TeamMember'][]; // [TeamMember!]!
    name: string | null; // String
    teamCaptain: NexusGenRootTypes['User'] | null; // User
    teamCaptainId: string | null; // String
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  TeamMember: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    id: string; // String!
    isCaptain: boolean; // Boolean!
    team: NexusGenRootTypes['Team']; // Team!
    teamId: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    user: NexusGenRootTypes['User'] | null; // User
    userId: string | null; // String
  }
  TicketType: { // field return type
    allowHeatSelection: boolean; // Boolean!
    competition: NexusGenRootTypes['Competition']; // Competition!
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    currency: NexusGenEnums['Currency']; // Currency!
    description: string | null; // String
    divisionScoreType: NexusGenEnums['DivisionScoreType'] | null; // DivisionScoreType
    earlyBird: NexusGenRootTypes['EarlyBird'] | null; // EarlyBird
    earlyBirdId: string | null; // String
    hasAvailability: boolean; // Boolean!
    id: string; // String!
    isTeamNameRequired: boolean; // Boolean!
    isVolunteer: boolean; // Boolean!
    maxEntries: number; // Int!
    name: string; // String!
    offerEarlyBird: boolean; // Boolean!
    passOnPlatformFee: boolean; // Boolean!
    price: number; // Float!
    refundPolicy: string | null; // String
    registered: number; // Int!
    registrationFields: NexusGenRootTypes['RegistrationField'][]; // [RegistrationField!]!
    stripePriceId: string | null; // String
    stripeProductId: string | null; // String
    teamSize: number; // Int!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  User: { // field return type
    bio: string | null; // String
    city: string | null; // String
    competitionsAsAthlete: NexusGenRootTypes['Competition'][]; // [Competition!]!
    competitionsAsCreator: NexusGenRootTypes['Competition'][]; // [Competition!]!
    country: string | null; // String
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    dateOfBirth: string | null; // String
    email: string; // String!
    feedback: NexusGenRootTypes['Feedback'][]; // [Feedback!]!
    firstName: string; // String!
    gender: string | null; // String
    id: string; // String!
    invitationId: string | null; // String
    isSuperUser: boolean; // Boolean!
    isVerified: boolean; // Boolean!
    lastName: string | null; // String
    name: string | null; // String
    orgId: string | null; // String
    payments: NexusGenRootTypes['Payment'][]; // [Payment!]!
    phoneNumber: string | null; // String
    picture: string | null; // String
    referralCode: string | null; // String
    referrals: NexusGenRootTypes['Referral'][]; // [Referral!]!
    referredBy: string | null; // String
    region: string | null; // String
    registrations: NexusGenRootTypes['Registration'][]; // [Registration!]!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
  }
  UserScheduleItem: { // field return type
    heat: NexusGenRootTypes['Heat']; // Heat!
    workout: NexusGenRootTypes['Workout']; // Workout!
  }
  Workout: { // field return type
    competitionId: string; // String!
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string; // String!
    id: string; // String!
    includeStandardsVideo: boolean; // Boolean!
    isVisible: boolean; // Boolean!
    location: string; // String!
    name: string; // String!
    releaseDateTime: NexusGenScalars['DateTime']; // DateTime!
    scoreSetting: NexusGenRootTypes['ScoreSetting']; // ScoreSetting!
    scoreType: NexusGenEnums['ScoreType']; // ScoreType!
    scores: Array<NexusGenRootTypes['Score'] | null> | null; // [Score]
    timeCap: number; // Int!
    unitOfMeasurement: NexusGenEnums['Unit']; // Unit!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    videos: Array<NexusGenRootTypes['WorkoutVideo'] | null> | null; // [WorkoutVideo]
  }
  WorkoutVideo: { // field return type
    createdAt: NexusGenScalars['DateTime']; // DateTime!
    description: string | null; // String
    id: string; // String!
    orderIndex: number; // Int!
    title: string; // String!
    updatedAt: NexusGenScalars['DateTime']; // DateTime!
    url: string; // String!
    workoutId: string; // String!
  }
}

export interface NexusGenFieldTypeNames {
  Address: { // field return type name
    city: 'String'
    country: 'String'
    id: 'String'
    postcode: 'String'
    region: 'String'
    street: 'String'
    venue: 'String'
  }
  AthleteCompetition: { // field return type name
    competition: 'Competition'
    competitionId: 'String'
    createdAt: 'DateTime'
    id: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Category: { // field return type name
    createdAt: 'DateTime'
    difficulty: 'Difficulty'
    directoryComp: 'DirectoryComp'
    directoryCompId: 'String'
    gender: 'Gender'
    id: 'String'
    isSoldOut: 'Boolean'
    price: 'Int'
    tags: 'String'
    teamSize: 'Int'
    updatedAt: 'DateTime'
  }
  Competition: { // field return type name
    access: 'Access'
    address: 'Address'
    addressId: 'String'
    ageGroup: 'AgeGroup'
    athletes: 'AthleteCompetition'
    createdAt: 'DateTime'
    createdBy: 'User'
    createdByUserId: 'String'
    creators: 'CompetitionCreator'
    currency: 'Currency'
    deadline: 'DateTime'
    description: 'String'
    difficulty: 'Difficulty'
    directoryComp: 'DirectoryComp'
    directoryCompId: 'String'
    earlyBird: 'EarlyBird'
    email: 'String'
    endDateTime: 'DateTime'
    gender: 'Gender'
    hasWorkouts: 'Boolean'
    id: 'String'
    instagramHandle: 'String'
    isActive: 'Boolean'
    lastTicketType: 'TicketType'
    location: 'String'
    logo: 'String'
    name: 'String'
    org: 'Org'
    orgName: 'String'
    participantsCount: 'Int'
    price: 'Float'
    registrationEnabled: 'Boolean'
    registrationTrend: 'DailyRegistration'
    registrationsCount: 'Int'
    releaseDateTime: 'DateTime'
    source: 'String'
    startDateTime: 'DateTime'
    teamsCount: 'Int'
    ticketTypes: 'TicketType'
    timezone: 'String'
    types: 'CompetitionType'
    updatedAt: 'DateTime'
    website: 'String'
  }
  CompetitionCreator: { // field return type name
    competition: 'Competition'
    competitionId: 'String'
    createdAt: 'DateTime'
    id: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  CompetitionEditSuggestion: { // field return type name
    competition: 'Competition'
    competitionId: 'String'
    createdAt: 'DateTime'
    id: 'String'
    reason: 'String'
    reviewedAt: 'DateTime'
    reviewedBy: 'String'
    reviewer: 'User'
    status: 'CompetitionEditSuggestionStatus'
    suggestedChanges: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  CompetitionFilters: { // field return type name
    cities: 'String'
    countries: 'String'
    teamSizes: 'Int'
  }
  CompetitionInvitationDetails: { // field return type name
    competition: 'Competition'
    createdAt: 'DateTime'
    email: 'String'
    id: 'String'
    sender: 'User'
    status: 'String'
  }
  CompetitionPayload: { // field return type name
    competition: 'Competition'
    message: 'String'
  }
  CompetitionWithStats: { // field return type name
    competition: 'Competition'
    registrationsInPeriod: 'Int'
  }
  DailyRegistration: { // field return type name
    count: 'Int'
    cumulativeCount: 'Int'
    date: 'String'
  }
  DirectoryComp: { // field return type name
    categories: 'Category'
    competition: 'Competition'
    competitionId: 'String'
    country: 'String'
    createdAt: 'DateTime'
    ctaLink: 'String'
    currency: 'Currency'
    description: 'String'
    email: 'String'
    endDate: 'DateTime'
    id: 'String'
    instagramHandle: 'String'
    location: 'String'
    logo: 'String'
    price: 'Float'
    region: 'String'
    startDate: 'DateTime'
    state: 'String'
    teamSize: 'String'
    ticketWebsite: 'String'
    title: 'String'
    updatedAt: 'DateTime'
    website: 'String'
  }
  EarlyBird: { // field return type name
    createdAt: 'DateTime'
    endDateTime: 'DateTime'
    id: 'String'
    limit: 'Int'
    price: 'Float'
    startDateTime: 'DateTime'
    ticketTypeId: 'String'
    updatedAt: 'DateTime'
  }
  Entry: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    invitationToken: 'String'
    laneByWorkoutId: 'Lane'
    name: 'String'
    score: 'Score'
    scores: 'Score'
    team: 'Team'
    teamId: 'String'
    ticketType: 'TicketType'
    ticketTypeId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  Feedback: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    text: 'String'
    userId: 'String'
  }
  ForgotPasswordResponse: { // field return type name
    error: 'String'
    success: 'Boolean'
  }
  Heat: { // field return type name
    allTicketTypes: 'TicketType'
    availableLanes: 'Int'
    createdAt: 'DateTime'
    heatLimitType: 'HeatLimitType'
    id: 'String'
    lanes: 'Lane'
    maxLimitPerHeat: 'Int'
    name: 'String'
    registrationsCount: 'Int'
    startTime: 'DateTime'
    ticketTypes: 'TicketType'
    updatedAt: 'DateTime'
    workout: 'Workout'
    workoutId: 'String'
  }
  HeatTicketTypes: { // field return type name
    heatId: 'String'
    ticketTypeId: 'String'
  }
  Integration: { // field return type name
    accessToken: 'String'
    athleteFirstname: 'String'
    athleteId: 'String'
    athleteLastname: 'String'
    athleteProfile: 'String'
    createdAt: 'DateTime'
    expiresAt: 'DateTime'
    id: 'String'
    refreshToken: 'String'
    registrationAnswerId: 'String'
    type: 'IntegrationType'
    updatedAt: 'DateTime'
  }
  Invitation: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    id: 'String'
    sentBy: 'User'
    sentByUserId: 'String'
    status: 'InvitationStatus'
    team: 'Team'
    teamId: 'String'
    token: 'String'
    updatedAt: 'DateTime'
  }
  Lane: { // field return type name
    createdAt: 'DateTime'
    entry: 'Entry'
    entryId: 'String'
    heat: 'Heat'
    heatId: 'String'
    id: 'String'
    number: 'Int'
    score: 'Score'
    updatedAt: 'DateTime'
  }
  LoginResponse: { // field return type name
    error: 'String'
    user: 'User'
  }
  LogoutPayload: { // field return type name
    message: 'String'
    success: 'Boolean'
  }
  Mutation: { // field return type name
    acceptCompetitionInvitation: 'Boolean'
    addDirectoryComp: 'Boolean'
    adminResetPassword: 'ResetPasswordResult'
    approvePotentialCompetitions: 'String'
    assignEntryToHeat: 'Lane'
    checkInAthlete: 'Registration'
    cloneCompetition: 'Competition'
    createBreak: 'Boolean'
    createBulkRegistrations: 'User'
    createComp: 'CompetitionPayload'
    createHeats: 'Heat'
    createNotificationSubscription: 'NotificationSubscription'
    createPartnerInterest: 'PartnerInterest'
    createPartnerInterestTeamMembers: 'PartnerInterestTeamMember'
    createPartnerRequest: 'PartnerRequest'
    createPaymentLink: 'String'
    createReferral: 'Referral'
    createRegistration: 'User'
    createRegistrationField: 'RegistrationField'
    createScore: 'Score'
    createTicketType: 'TicketType'
    createVolunteerTicketType: 'TicketType'
    createWorkout: 'Workout'
    createWorkoutVideo: 'WorkoutVideo'
    deleteCompetition: 'Boolean'
    deleteDirectoryComp: 'Boolean'
    deleteHeat: 'Heat'
    deleteRegistration: 'Boolean'
    deleteRegistrationField: 'String'
    deleteTeam: 'Boolean'
    deleteTicketType: 'TicketType'
    deleteVolunteerTicket: 'String'
    deleteWorkout: 'Workout'
    deleteWorkoutVideo: 'Boolean'
    duplicateTicketType: 'TicketType'
    forgotPassword: 'ForgotPasswordResponse'
    generateHeatsFromSettings: 'Heat'
    importDirectoryComp: 'Boolean'
    inviteToCompetition: 'Boolean'
    linkDirectoryCompToCompetition: 'Boolean'
    login: 'LoginResponse'
    logout: 'LogoutPayload'
    moveAthleteToTeam: 'Boolean'
    rejectPotentialCompetitions: 'String'
    requestDirectoryCompEdit: 'Boolean'
    resendInvitation: 'Boolean'
    resetPassword: 'ResetPasswordResponse'
    scheduleDayBeforeEventEmail: 'Boolean'
    sendBulkEmail: 'Boolean'
    sendEmails: 'Boolean'
    sendInvitations: 'Boolean'
    sendLoginToken: 'Boolean'
    signUp: 'SignupResponse'
    submitFeedback: 'Feedback'
    suggestCompetitionEdit: 'String'
    suggestNewCompetition: 'String'
    unassignAllEntries: 'Boolean'
    unassignEntry: 'Lane'
    unlinkDirectoryCompFromCompetition: 'Boolean'
    updateCompetition: 'Competition'
    updateDirectoryComp: 'DirectoryComp'
    updateDirectoryCompStates: 'DirectoryComp'
    updateEarlyBird: 'EarlyBird'
    updateHeat: 'Heat'
    updateHeatLimits: 'Heat'
    updateInvitation: 'Invitation'
    updateLaneHeat: 'Lane'
    updateLaneOrder: 'Lane'
    updateNotificationSubscription: 'NotificationSubscription'
    updatePartnerInterest: 'PartnerInterest'
    updatePartnerRequest: 'PartnerRequest'
    updatePotentialCompetition: 'String'
    updateRegistrationField: 'RegistrationField'
    updateScoreById: 'Score'
    updateTeam: 'Team'
    updateTicketType: 'TicketType'
    updateUser: 'User'
    updateUserBio: 'User'
    updateUserById: 'User'
    updateWorkout: 'Workout'
    updateWorkoutVideo: 'WorkoutVideo'
    updateWorkoutVisibility: 'Workout'
    uploadCompetitionLogo: 'Competition'
    uploadOrgImage: 'Org'
    uploadUserAvatar: 'User'
  }
  NotificationSubscription: { // field return type name
    countries: 'String'
    difficulty: 'String'
    email: 'String'
    eventType: 'String'
    gender: 'String'
    id: 'String'
    locations: 'String'
    tags: 'String'
    teamSize: 'String'
    userId: 'String'
  }
  Org: { // field return type name
    contactNumber: 'String'
    createdAt: 'DateTime'
    description: 'String'
    email: 'String'
    facebook: 'String'
    id: 'String'
    instagram: 'String'
    logo: 'String'
    name: 'String'
    twitter: 'String'
    updatedAt: 'DateTime'
    website: 'String'
    youtube: 'String'
  }
  PartnerInterest: { // field return type name
    category: 'Category'
    categoryId: 'String'
    createdAt: 'DateTime'
    description: 'String'
    id: 'String'
    instagram: 'String'
    interestType: 'PartnerInterestType'
    partnerPreference: 'PartnerPreference'
    partnerRequests: 'PartnerRequest'
    phone: 'String'
    status: 'String'
    teamMembers: 'PartnerInterestTeamMember'
    ticketType: 'TicketType'
    ticketTypeId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  PartnerInterestTeamMember: { // field return type name
    createdAt: 'DateTime'
    email: 'String'
    id: 'String'
    invitationToken: 'String'
    name: 'String'
    partnerInterest: 'PartnerInterest'
    partnerInterestId: 'String'
    status: 'PartnerInterestTeamMemberStatus'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  PartnerRequest: { // field return type name
    createdAt: 'DateTime'
    fromInterest: 'PartnerInterest'
    fromInterestId: 'String'
    fromUser: 'User'
    fromUserId: 'String'
    id: 'String'
    instagram: 'String'
    message: 'String'
    phone: 'String'
    status: 'PartnerRequestStatus'
    toInterest: 'PartnerInterest'
    toInterestId: 'String'
    updatedAt: 'DateTime'
  }
  Payment: { // field return type name
    amount: 'Int'
    createdAt: 'DateTime'
    currency: 'String'
    id: 'String'
    paymentIntentId: 'String'
    registrationId: 'String'
    status: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  PaymentCompetitionMapping: { // field return type name
    amount: 'String'
    competition: 'Competition'
    currency: 'String'
    date: 'String'
    email: 'String'
    ticketType: 'TicketType'
    transactionId: 'String'
  }
  PotentialCompetition: { // field return type name
    address: 'Address'
    addressId: 'String'
    country: 'String'
    createdAt: 'DateTime'
    currency: 'String'
    description: 'String'
    email: 'String'
    endDateTime: 'DateTime'
    id: 'String'
    instagramHandle: 'String'
    logo: 'String'
    name: 'String'
    orgName: 'String'
    potentialTicketTypes: 'PotentialTicketType'
    price: 'Float'
    region: 'String'
    reviewedAt: 'DateTime'
    reviewedBy: 'String'
    reviewer: 'User'
    scrapedData: 'String'
    source: 'String'
    startDateTime: 'DateTime'
    state: 'String'
    status: 'PotentialCompetitionStatus'
    timezone: 'String'
    updatedAt: 'DateTime'
    website: 'String'
  }
  PotentialTicketType: { // field return type name
    allowHeatSelection: 'Boolean'
    createdAt: 'DateTime'
    currency: 'String'
    description: 'String'
    id: 'String'
    isVolunteer: 'Boolean'
    maxEntries: 'Int'
    name: 'String'
    passOnPlatformFee: 'Boolean'
    potentialCompetitionId: 'String'
    price: 'Float'
    teamSize: 'Int'
    updatedAt: 'DateTime'
  }
  Query: { // field return type name
    checkReferralCode: 'Boolean'
    earlyBirdById: 'EarlyBird'
    getAllDirectoryComps: 'DirectoryComp'
    getAvailableHeatsByCompetitionId: 'Heat'
    getAvailableTeamsForMove: 'Team'
    getCompetitionById: 'Competition'
    getCompetitionFilters: 'CompetitionFilters'
    getCompetitionInvitation: 'CompetitionInvitationDetails'
    getCompetitionsByIds: 'Competition'
    getCompetitionsByUser: 'Competition'
    getDirectoryComp: 'DirectoryComp'
    getDirectoryComps: 'DirectoryComp'
    getEntriesByCompetitionId: 'Entry'
    getEntriesByWorkoutId: 'Entry'
    getEntryByUserAndCompetition: 'Entry'
    getExploreCompetitions: 'Competition'
    getHeatById: 'Heat'
    getHeatTicketTypesByHeatId: 'HeatTicketTypes'
    getHeatsByCompetitionId: 'Heat'
    getHeatsByWorkoutId: 'Heat'
    getIntegration: 'Integration'
    getIntegrationByRegistrationAnswerId: 'Integration'
    getInvitationByToken: 'Invitation'
    getInvitationsByTeamId: 'Invitation'
    getLaneById: 'Lane'
    getLanesByHeatId: 'Lane'
    getMyCompetitionsAsAthlete: 'Competition'
    getMyCompetitionsAsCreator: 'Competition'
    getNotificationSubscription: 'NotificationSubscription'
    getPartnerInterests: 'PartnerInterest'
    getPartnerRequests: 'PartnerRequest'
    getPaymentMappings: 'PaymentCompetitionMapping'
    getPotentialCompetition: 'PotentialCompetition'
    getPotentialCompetitions: 'PotentialCompetition'
    getRegistrantById: 'Registration'
    getRegistrationFieldsByCompetitionId: 'RegistrationField'
    getRegistrationStats: 'RegistrationStats'
    getRegistrationsByCompetitionId: 'Registration'
    getScoreSettingByCompetitionId: 'ScoreSetting'
    getScoreSettingById: 'ScoreSetting'
    getScoresByWorkoutId: 'Score'
    getSentEmails: 'SentEmail'
    getTicketTypeById: 'TicketType'
    getTicketTypesByCompetitionId: 'TicketType'
    getUnassignedEntriesByCompetitionId: 'Entry'
    getUser: 'User'
    getUserSchedule: 'UserScheduleItem'
    getViewer: 'User'
    getWorkoutById: 'Workout'
    getWorkoutsByCompetitionId: 'Workout'
    isUserRegisteredForCompetition: 'Boolean'
  }
  Referral: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    referredId: 'String'
    referrerId: 'String'
  }
  Registration: { // field return type name
    competition: 'Competition'
    competitionId: 'String'
    createdAt: 'DateTime'
    id: 'String'
    isCheckedIn: 'Boolean'
    registrationAnswers: 'RegistrationAnswer'
    registrationFields: 'RegistrationField'
    team: 'Team'
    teamName: 'String'
    ticketType: 'TicketType'
    ticketTypeId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  RegistrationAnswer: { // field return type name
    answer: 'String'
    competition: 'Competition'
    competitionId: 'String'
    createdAt: 'DateTime'
    id: 'String'
    registrationField: 'RegistrationField'
    registrationFieldId: 'String'
    ticketTypeId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  RegistrationField: { // field return type name
    id: 'String'
    integration: 'String'
    isEditable: 'Boolean'
    isVolunteer: 'Boolean'
    onlyTeams: 'Boolean'
    options: 'String'
    question: 'String'
    repeatPerAthlete: 'Boolean'
    requiredStatus: 'RequiredStatus'
    sortOrder: 'Int'
    ticketTypes: 'TicketType'
    type: 'QuestionType'
  }
  RegistrationStats: { // field return type name
    competitions: 'CompetitionWithStats'
    periodEnd: 'String'
    periodStart: 'String'
    totalRegistrations: 'Int'
  }
  ResetPasswordResponse: { // field return type name
    error: 'String'
    success: 'Boolean'
  }
  ResetPasswordResult: { // field return type name
    error: 'String'
    success: 'Boolean'
  }
  Score: { // field return type name
    createdAt: 'DateTime'
    entry: 'Entry'
    entryId: 'String'
    id: 'String'
    isCompleted: 'Boolean'
    note: 'String'
    scorecard: 'String'
    updatedAt: 'DateTime'
    value: 'String'
    workout: 'Workout'
    workoutId: 'String'
  }
  ScoreSetting: { // field return type name
    competitionId: 'String'
    createdAt: 'DateTime'
    firstHeatStartTime: 'DateTime'
    handleTie: 'Tiebreaker'
    heatLimitType: 'HeatLimitType'
    heatsEveryXMinutes: 'Int'
    id: 'String'
    maxLimitPerHeat: 'Int'
    oneTicketPerHeat: 'Boolean'
    penalizeIncomplete: 'Boolean'
    penalizeScaled: 'Boolean'
    scoring: 'DivisionScoreType'
    ticketTypeOrderIds: 'String'
    totalHeatsPerWorkout: 'Int'
    updatedAt: 'DateTime'
  }
  SentEmail: { // field return type name
    competitionId: 'String'
    id: 'String'
    message: 'String'
    recipients: 'String'
    sentAt: 'DateTime'
    subject: 'String'
    userId: 'String'
  }
  SignupResponse: { // field return type name
    error: 'String'
    user: 'User'
  }
  Team: { // field return type name
    category: 'Category'
    createdAt: 'DateTime'
    id: 'String'
    invitations: 'Invitation'
    members: 'TeamMember'
    name: 'String'
    teamCaptain: 'User'
    teamCaptainId: 'String'
    updatedAt: 'DateTime'
  }
  TeamMember: { // field return type name
    createdAt: 'DateTime'
    id: 'String'
    isCaptain: 'Boolean'
    team: 'Team'
    teamId: 'String'
    updatedAt: 'DateTime'
    user: 'User'
    userId: 'String'
  }
  TicketType: { // field return type name
    allowHeatSelection: 'Boolean'
    competition: 'Competition'
    competitionId: 'String'
    createdAt: 'DateTime'
    currency: 'Currency'
    description: 'String'
    divisionScoreType: 'DivisionScoreType'
    earlyBird: 'EarlyBird'
    earlyBirdId: 'String'
    hasAvailability: 'Boolean'
    id: 'String'
    isTeamNameRequired: 'Boolean'
    isVolunteer: 'Boolean'
    maxEntries: 'Int'
    name: 'String'
    offerEarlyBird: 'Boolean'
    passOnPlatformFee: 'Boolean'
    price: 'Float'
    refundPolicy: 'String'
    registered: 'Int'
    registrationFields: 'RegistrationField'
    stripePriceId: 'String'
    stripeProductId: 'String'
    teamSize: 'Int'
    updatedAt: 'DateTime'
  }
  User: { // field return type name
    bio: 'String'
    city: 'String'
    competitionsAsAthlete: 'Competition'
    competitionsAsCreator: 'Competition'
    country: 'String'
    createdAt: 'DateTime'
    dateOfBirth: 'String'
    email: 'String'
    feedback: 'Feedback'
    firstName: 'String'
    gender: 'String'
    id: 'String'
    invitationId: 'String'
    isSuperUser: 'Boolean'
    isVerified: 'Boolean'
    lastName: 'String'
    name: 'String'
    orgId: 'String'
    payments: 'Payment'
    phoneNumber: 'String'
    picture: 'String'
    referralCode: 'String'
    referrals: 'Referral'
    referredBy: 'String'
    region: 'String'
    registrations: 'Registration'
    updatedAt: 'DateTime'
  }
  UserScheduleItem: { // field return type name
    heat: 'Heat'
    workout: 'Workout'
  }
  Workout: { // field return type name
    competitionId: 'String'
    createdAt: 'DateTime'
    description: 'String'
    id: 'String'
    includeStandardsVideo: 'Boolean'
    isVisible: 'Boolean'
    location: 'String'
    name: 'String'
    releaseDateTime: 'DateTime'
    scoreSetting: 'ScoreSetting'
    scoreType: 'ScoreType'
    scores: 'Score'
    timeCap: 'Int'
    unitOfMeasurement: 'Unit'
    updatedAt: 'DateTime'
    videos: 'WorkoutVideo'
  }
  WorkoutVideo: { // field return type name
    createdAt: 'DateTime'
    description: 'String'
    id: 'String'
    orderIndex: 'Int'
    title: 'String'
    updatedAt: 'DateTime'
    url: 'String'
    workoutId: 'String'
  }
}

export interface NexusGenArgTypes {
  Entry: {
    laneByWorkoutId: { // args
      workoutId: string; // String!
    }
    score: { // args
      workoutId: string; // String!
    }
  }
  Mutation: {
    acceptCompetitionInvitation: { // args
      token: string; // String!
    }
    addDirectoryComp: { // args
      input: NexusGenInputs['AddDirectoryCompInput']; // AddDirectoryCompInput!
    }
    adminResetPassword: { // args
      newPassword: string; // String!
      userId: string; // String!
    }
    approvePotentialCompetitions: { // args
      potentialCompetitionIds: string[]; // [String!]!
    }
    assignEntryToHeat: { // args
      entryId: string; // String!
      heatId: string; // String!
    }
    checkInAthlete: { // args
      isCheckedIn: boolean; // Boolean!
      registrationId: string; // String!
    }
    cloneCompetition: { // args
      id: string; // String!
    }
    createBreak: { // args
      input: NexusGenInputs['CreateBreakInput']; // CreateBreakInput!
    }
    createBulkRegistrations: { // args
      input: NexusGenInputs['BulkRegistrationInput'][]; // [BulkRegistrationInput!]!
    }
    createComp: { // args
      endDateTime: NexusGenScalars['DateTime']; // DateTime!
      name: string; // String!
      numberOfWorkouts: number; // Int!
      orgName?: string | null; // String
      startDateTime: NexusGenScalars['DateTime']; // DateTime!
      timezone?: string | null; // String
    }
    createHeats: { // args
      competitionId: string; // String!
      input: NexusGenInputs['CreateHeatInput'][]; // [CreateHeatInput!]!
    }
    createNotificationSubscription: { // args
      input: NexusGenInputs['CreateNotificationSubscriptionInput']; // CreateNotificationSubscriptionInput!
    }
    createPartnerInterest: { // args
      input: NexusGenInputs['CreatePartnerInterestInput']; // CreatePartnerInterestInput!
    }
    createPartnerInterestTeamMembers: { // args
      partnerInterestId: string; // String!
      teamMembers: NexusGenScalars['Json'][]; // [Json!]!
    }
    createPartnerRequest: { // args
      input: NexusGenInputs['CreatePartnerRequestInput']; // CreatePartnerRequestInput!
    }
    createPaymentLink: { // args
      input: NexusGenInputs['CreatePaymentLinkInput']; // CreatePaymentLinkInput!
    }
    createReferral: { // args
      referredId: string; // String!
      referrerId: string; // String!
    }
    createRegistration: { // args
      input: NexusGenInputs['CreateRegistrationInput']; // CreateRegistrationInput!
    }
    createRegistrationField: { // args
      registrationField: NexusGenInputs['RegistrationFieldInput']; // RegistrationFieldInput!
      ticketTypeIds: string[]; // [String!]!
    }
    createScore: { // args
      isCompleted: boolean; // Boolean!
      laneId: string; // String!
      note?: string | null; // String
      scorecard?: string | null; // String
      value: string; // String!
    }
    createTicketType: { // args
      input: NexusGenInputs['TicketTypeInput']; // TicketTypeInput!
    }
    createVolunteerTicketType: { // args
      competitionId: string; // String!
    }
    createWorkout: { // args
      input: NexusGenInputs['CreateWorkoutInput']; // CreateWorkoutInput!
    }
    createWorkoutVideo: { // args
      description?: string | null; // String
      orderIndex?: number | null; // Int
      title: string; // String!
      url: string; // String!
      workoutId: string; // String!
    }
    deleteCompetition: { // args
      id: string; // String!
    }
    deleteDirectoryComp: { // args
      id: string; // String!
    }
    deleteHeat: { // args
      id: string; // String!
    }
    deleteRegistration: { // args
      competitionId: string; // ID!
      registrationId: string; // ID!
      teamId?: string | null; // ID
      userId?: string | null; // ID
    }
    deleteRegistrationField: { // args
      registrationFieldId: string; // String!
    }
    deleteTeam: { // args
      competitionId: string; // ID!
      teamId: string; // ID!
    }
    deleteTicketType: { // args
      id: string; // String!
    }
    deleteVolunteerTicket: { // args
      competitionId: string; // String!
    }
    deleteWorkout: { // args
      id: string; // String!
    }
    deleteWorkoutVideo: { // args
      id: string; // String!
    }
    duplicateTicketType: { // args
      originalId: string; // String!
    }
    forgotPassword: { // args
      email: string; // String!
    }
    generateHeatsFromSettings: { // args
      competitionId: string; // String!
      input: NexusGenInputs['GenerateHeatsInput']; // GenerateHeatsInput!
    }
    inviteToCompetition: { // args
      competitionId: string; // String!
      email: string; // String!
    }
    linkDirectoryCompToCompetition: { // args
      competitionId: string; // String!
      directoryCompId: string; // String!
    }
    login: { // args
      email: string; // String!
      password: string; // String!
    }
    moveAthleteToTeam: { // args
      competitionId: string; // String!
      targetTeamId: string; // String!
      userId: string; // String!
    }
    rejectPotentialCompetitions: { // args
      potentialCompetitionIds: string[]; // [String!]!
    }
    requestDirectoryCompEdit: { // args
      input: NexusGenInputs['RequestDirectoryCompEditInput']; // RequestDirectoryCompEditInput!
    }
    resendInvitation: { // args
      invitationId: string; // String!
    }
    resetPassword: { // args
      password: string; // String!
      token: string; // String!
    }
    scheduleDayBeforeEventEmail: { // args
      competitionId: string; // ID!
    }
    sendEmails: { // args
      competitionId: string; // String!
      message: string; // String!
      recipients: string[]; // [String!]!
      subject: string; // String!
    }
    sendInvitations: { // args
      competitionId: string; // String!
      emails: string[]; // [String!]!
    }
    sendLoginToken: { // args
      input: NexusGenInputs['SendLoginTokenInput']; // SendLoginTokenInput!
    }
    signUp: { // args
      email: string; // String!
      firstName: string; // String!
      lastName: string; // String!
      password: string; // String!
    }
    submitFeedback: { // args
      text: string; // String!
    }
    suggestCompetitionEdit: { // args
      city?: string | null; // String
      competitionId: string; // String!
      country?: string | null; // String
      currency?: string | null; // String
      description?: string | null; // String
      email?: string | null; // String
      name?: string | null; // String
      price?: number | null; // Float
      reason?: string | null; // String
      venue?: string | null; // String
      website?: string | null; // String
    }
    suggestNewCompetition: { // args
      city?: string | null; // String
      country?: string | null; // String
      currency?: string | null; // String
      description?: string | null; // String
      email?: string | null; // String
      endDate?: string | null; // String
      name: string; // String!
      price?: number | null; // Float
      reason?: string | null; // String
      startDate?: string | null; // String
      venue?: string | null; // String
      website?: string | null; // String
    }
    unassignAllEntries: { // args
      competitionId: string; // String!
    }
    unassignEntry: { // args
      laneId: string; // String!
    }
    unlinkDirectoryCompFromCompetition: { // args
      competitionId: string; // String!
      directoryCompId: string; // String!
    }
    updateCompetition: { // args
      city?: string | null; // String
      country?: string | null; // String
      description?: string | null; // String
      email?: string | null; // String
      endDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
      facebook?: string | null; // String
      id: string; // String!
      instagram?: string | null; // String
      name?: string | null; // String
      orgName?: string | null; // String
      postcode?: string | null; // String
      registrationEnabled?: boolean | null; // Boolean
      startDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
      street?: string | null; // String
      timezone?: string | null; // String
      twitter?: string | null; // String
      types?: Array<NexusGenEnums['CompetitionType'] | null> | null; // [CompetitionType]
      venue?: string | null; // String
      youtube?: string | null; // String
    }
    updateDirectoryComp: { // args
      input: NexusGenInputs['UpdateDirectoryCompInput']; // UpdateDirectoryCompInput!
    }
    updateEarlyBird: { // args
      earlyBird: NexusGenInputs['EarlyBirdInput']; // EarlyBirdInput!
    }
    updateHeat: { // args
      id: string; // String!
      maxLimitPerHeat?: number | null; // Int
      startTime?: NexusGenScalars['DateTime'] | null; // DateTime
      ticketTypeIds?: string[] | null; // [String!]
    }
    updateHeatLimits: { // args
      input: NexusGenInputs['UpdateHeatLimitsInput'][]; // [UpdateHeatLimitsInput!]!
    }
    updateInvitation: { // args
      email: string; // String!
      id: string; // String!
    }
    updateLaneHeat: { // args
      heatId: string; // String!
      id: string; // String!
    }
    updateLaneOrder: { // args
      laneId: string; // String!
      newPosition: number; // Int!
    }
    updateNotificationSubscription: { // args
      input: NexusGenInputs['UpdateNotificationSubscriptionInput']; // UpdateNotificationSubscriptionInput!
    }
    updatePartnerInterest: { // args
      categoryId?: string | null; // String
      description?: string | null; // String
      id: string; // String!
      instagram?: string | null; // String
      phone?: string | null; // String
      ticketTypeId?: string | null; // String
    }
    updatePartnerRequest: { // args
      input: NexusGenInputs['UpdatePartnerRequestInput']; // UpdatePartnerRequestInput!
    }
    updatePotentialCompetition: { // args
      city?: string | null; // String
      country?: string | null; // String
      currency?: string | null; // String
      description?: string | null; // String
      email?: string | null; // String
      endDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
      id: string; // String!
      instagramHandle?: string | null; // String
      name?: string | null; // String
      price?: number | null; // Float
      region?: string | null; // String
      startDateTime?: NexusGenScalars['DateTime'] | null; // DateTime
      state?: string | null; // String
      venue?: string | null; // String
      website?: string | null; // String
    }
    updateRegistrationField: { // args
      id: string; // String!
      options?: Array<string | null> | null; // [String]
      question?: string | null; // String
      repeatPerAthlete?: boolean | null; // Boolean
      requiredStatus?: NexusGenEnums['RequiredStatus'] | null; // RequiredStatus
      ticketTypeIds?: string[] | null; // [String!]
      type?: NexusGenEnums['QuestionType'] | null; // QuestionType
    }
    updateScoreById: { // args
      id: string; // String!
      isCompleted: boolean; // Boolean!
      note?: string | null; // String
      scorecard?: string | null; // String
      value: string; // String!
    }
    updateTeam: { // args
      id: string; // String!
      name: string; // String!
    }
    updateTicketType: { // args
      input: NexusGenInputs['UpdateTicketTypeInput']; // UpdateTicketTypeInput!
    }
    updateUser: { // args
      firstName?: string | null; // String
      lastName?: string | null; // String
    }
    updateUserBio: { // args
      bio: string; // String!
    }
    updateUserById: { // args
      competitionId: string; // String!
      firstName?: string | null; // String
      lastName?: string | null; // String
      userId: string; // String!
    }
    updateWorkout: { // args
      id: string; // String!
      input: NexusGenInputs['UpdateWorkoutInput']; // UpdateWorkoutInput!
    }
    updateWorkoutVideo: { // args
      description?: string | null; // String
      id: string; // String!
      orderIndex?: number | null; // Int
      title?: string | null; // String
      url?: string | null; // String
    }
    updateWorkoutVisibility: { // args
      id: string; // String!
      isVisible: boolean; // Boolean!
    }
    uploadCompetitionLogo: { // args
      competitionId: string; // String!
      image: string; // String!
    }
    uploadOrgImage: { // args
      image: string; // String!
      orgId: string; // String!
    }
    uploadUserAvatar: { // args
      image: string; // String!
    }
  }
  Query: {
    checkReferralCode: { // args
      referralCode: string; // String!
    }
    earlyBirdById: { // args
      id: string; // String!
    }
    getAvailableHeatsByCompetitionId: { // args
      competitionId: string; // String!
      ticketTypeId: string; // String!
    }
    getAvailableTeamsForMove: { // args
      competitionId: string; // String!
      excludeTeamId?: string | null; // String
      ticketTypeId: string; // String!
    }
    getCompetitionById: { // args
      id: string; // String!
    }
    getCompetitionInvitation: { // args
      token: string; // String!
    }
    getCompetitionsByIds: { // args
      ids: string[]; // [String!]!
    }
    getDirectoryComp: { // args
      id: string; // String!
    }
    getDirectoryComps: { // args
      initialLoad: boolean; // Boolean!
    }
    getEntriesByCompetitionId: { // args
      competitionId: string; // String!
    }
    getEntriesByWorkoutId: { // args
      workoutId: string; // String!
    }
    getEntryByUserAndCompetition: { // args
      competitionId: string; // String!
      userId: string; // String!
    }
    getExploreCompetitions: { // args
      cities?: string[] | null; // [String!]
      countries?: string[] | null; // [String!]
      endDate?: string | null; // String
      genders?: string[] | null; // [String!]
      limit: number; // Int!
      offset: number; // Int!
      search?: string | null; // String
      startDate?: string | null; // String
      teamSize?: string | null; // String
    }
    getHeatById: { // args
      id: string; // String!
    }
    getHeatTicketTypesByHeatId: { // args
      heatId: string; // String!
    }
    getHeatsByCompetitionId: { // args
      competitionId: string; // String!
    }
    getHeatsByWorkoutId: { // args
      workoutId: string; // String!
    }
    getIntegration: { // args
      id: string; // String!
    }
    getIntegrationByRegistrationAnswerId: { // args
      registrationAnswerId: string; // String!
    }
    getInvitationByToken: { // args
      token: string; // String!
    }
    getInvitationsByTeamId: { // args
      teamId: string; // String!
    }
    getLaneById: { // args
      id: string; // String!
    }
    getLanesByHeatId: { // args
      heatId: string; // String!
    }
    getNotificationSubscription: { // args
      email: string; // String!
    }
    getPartnerInterests: { // args
      competitionId?: string | null; // String
      directoryCompId?: string | null; // String
      interestType?: string | null; // String
      status?: string | null; // String
    }
    getPaymentMappings: { // args
      days: string | null; // String
      emails?: string | null; // String
    }
    getPotentialCompetition: { // args
      id: string; // String!
    }
    getRegistrantById: { // args
      id: string; // String!
    }
    getRegistrationFieldsByCompetitionId: { // args
      competitionId: string; // String!
      isVolunteer: boolean; // Boolean!
    }
    getRegistrationStats: { // args
      days: string | null; // String
    }
    getRegistrationsByCompetitionId: { // args
      competitionId: string; // String!
    }
    getScoreSettingByCompetitionId: { // args
      competitionId: string; // String!
    }
    getScoreSettingById: { // args
      id: string; // String!
    }
    getScoresByWorkoutId: { // args
      workoutId: string; // String!
    }
    getSentEmails: { // args
      compId: string; // String!
    }
    getTicketTypeById: { // args
      ticketId: string; // String!
    }
    getTicketTypesByCompetitionId: { // args
      competitionId: string; // String!
    }
    getUnassignedEntriesByCompetitionId: { // args
      competitionId: string; // String!
    }
    getUserSchedule: { // args
      competitionId: string; // String!
      userId: string; // String!
    }
    getWorkoutById: { // args
      id: string; // String!
    }
    getWorkoutsByCompetitionId: { // args
      competitionId: string; // String!
    }
    isUserRegisteredForCompetition: { // args
      competitionId: string; // String!
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = keyof NexusGenInputs;

export type NexusGenEnumNames = keyof NexusGenEnums;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
    
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}